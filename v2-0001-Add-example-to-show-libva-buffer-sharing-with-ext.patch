From 11ae7f2ffcaf63658bd9eb8e5def76962bfeb8eb Mon Sep 17 00:00:00 2001
From: Chuanbo Weng <chuanbo.weng@intel.com>
Date: Mon, 22 Dec 2014 17:58:23 +0800
Subject: [PATCH v2 1/2] Add example to show libva buffer sharing with
 extension clCreateImageFromLibvaIntel.

This example read a source nv12 file to a VASurface, and create a target
VASurface. Then create corresponding cl image objects from them. After
using ocl to change this VASurface to a gray image, target VASurface is
saved as a file.
Code of loading nv12 file to VASurface and display related are referenced
from libva/test/encode/avcenc.c and libva/test/common.

v2:
Delete 1920x1080.nv12 and 640x480.nv12 because of large size, add
256_128.nv12 as default test image.

Signed-off-by: Chuanbo Weng <chuanbo.weng@intel.com>
Signed-off-by: Zhao Yakui <yakui.zhao@intel.com>
---
 CMakeLists.txt                                     |  27 ++
 examples/CMakeLists.txt                            |  26 ++
 examples/libva_buffer_sharing/256_128.nv12         |   1 +
 .../libva_buffer_sharing/libva_buffer_sharing.cpp  | 443 +++++++++++++++++++++
 examples/libva_buffer_sharing/sysdeps.h            |  79 ++++
 examples/libva_buffer_sharing/va_display.c         | 166 ++++++++
 examples/libva_buffer_sharing/va_display.h         |  64 +++
 examples/libva_buffer_sharing/va_display_x11.c     | 139 +++++++
 kernels/runtime_gray_effect.cl                     |  28 ++
 9 files changed, 973 insertions(+)
 create mode 100644 examples/CMakeLists.txt
 create mode 100644 examples/libva_buffer_sharing/256_128.nv12
 create mode 100644 examples/libva_buffer_sharing/libva_buffer_sharing.cpp
 create mode 100644 examples/libva_buffer_sharing/sysdeps.h
 create mode 100644 examples/libva_buffer_sharing/va_display.c
 create mode 100644 examples/libva_buffer_sharing/va_display.h
 create mode 100755 examples/libva_buffer_sharing/va_display_x11.c
 create mode 100644 kernels/runtime_gray_effect.cl

diff --git a/CMakeLists.txt b/CMakeLists.txt
index a967540..4edf543 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -198,11 +198,38 @@ ENDIF(OCLIcd_FOUND)
 
 Find_Package(PythonInterp)
 
+OPTION(BUILD_EXAMPLES "Build examples" OFF)
+IF(BUILD_EXAMPLES)
+IF(NOT X11_FOUND)
+  MESSAGE(FATAL_ERROR "XLib is necessary for examples - not found")
+ENDIF(NOT X11_FOUND)
+# libva
+pkg_check_modules(LIBVA REQUIRED libva>=0.36.0)
+IF(LIBVA_FOUND)
+  MESSAGE(STATUS "Looking for LIBVA - found at ${LIBVA_PREFIX} ${LIBVA_VERSION}")
+  INCLUDE_DIRECTORIES(${LIBVA_INCLUDE_DIRS})
+ELSE(LIBVA_FOUND)
+  MESSAGE(STATUS "Looking for LIBVA (>= 0.36.0) - not found")
+ENDIF(LIBVA_FOUND)
+
+# libva-x11
+pkg_check_modules(LIBVA-X11 REQUIRED libva-x11>=0.36.0)
+IF(LIBVA-X11_FOUND)
+  MESSAGE(STATUS "Looking for LIBVA-X11 - found at ${LIBVA-X11_PREFIX} ${LIBVA-X11_VERSION}")
+  INCLUDE_DIRECTORIES(${LIBVA-X11_INCLUDE_DIRS})
+ELSE(LIBVA-X11_FOUND)
+  MESSAGE(STATUS "Looking for LIBVA-X11 (>= 0.36.0) - not found")
+ENDIF(LIBVA-X11_FOUND)
+ENDIF(BUILD_EXAMPLES)
+
 ADD_SUBDIRECTORY(include)
 ADD_SUBDIRECTORY(backend)
 ADD_SUBDIRECTORY(src)
 ADD_SUBDIRECTORY(utests)
 ADD_SUBDIRECTORY(benchmark)
+IF(BUILD_EXAMPLES)
+ADD_SUBDIRECTORY(examples)
+ENDIF(BUILD_EXAMPLES)
 
 SET(CPACK_PACKAGE_VERSION_MAJOR "${LIBCL_DRIVER_VERSION_MAJOR}")
 SET(CPACK_PACKAGE_VERSION_MINOR "${LIBCL_DRIVER_VERSION_MINOR}")
diff --git a/examples/CMakeLists.txt b/examples/CMakeLists.txt
new file mode 100644
index 0000000..3fec8f3
--- /dev/null
+++ b/examples/CMakeLists.txt
@@ -0,0 +1,26 @@
+INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}
+                    ${CMAKE_CURRENT_SOURCE_DIR}/../utests
+                    ${CMAKE_CURRENT_SOURCE_DIR}/../include
+					${X11_INCLUDE_DIR})
+
+link_directories (${LIBVA_LIBDIR}
+				  ${LIBVA-X11_LIBDIR})
+
+set (examples_sources
+  ../utests/utest_error.c
+  ../utests/utest_assert.cpp
+  ../utests/utest_file_map.cpp
+  ../utests/utest_helper.cpp
+  ./libva_buffer_sharing/va_display.c
+  ./libva_buffer_sharing/va_display_x11.c)
+
+
+ADD_DEFINITIONS(-DHAVE_VA_X11)
+ADD_DEFINITIONS(-DINPUT_NV12_DEFAULT="${CMAKE_CURRENT_SOURCE_DIR}/libva_buffer_sharing/256_128.nv12")
+
+ADD_LIBRARY(va_ocl_basic SHARED ${examples_sources})
+
+TARGET_LINK_LIBRARIES(va_ocl_basic cl m va va-x11 ${X11_X11_LIB})
+
+ADD_EXECUTABLE(example-libva_buffer_sharing ./libva_buffer_sharing/libva_buffer_sharing.cpp)
+TARGET_LINK_LIBRARIES(example-libva_buffer_sharing va_ocl_basic)
diff --git a/examples/libva_buffer_sharing/256_128.nv12 b/examples/libva_buffer_sharing/256_128.nv12
new file mode 100644
index 0000000..230f4cf
--- /dev/null
+++ b/examples/libva_buffer_sharing/256_128.nv12
@@ -0,0 +1 @@
+FDFGGGGIIIJHKLKLNLLOMOOOPRA)BNQPRRRSRRUTVXVTUVXWWYVXWXWYXXZYZYYYZZ[[[\[ZZ\[Z\\^]]]]]^]^^^^^____`_`_`_```a``acaaacbcbdcabdbccbdcdcdcadcdbccdbccdbdddccddcdcdabcbcbcbccbbcaabdcbbLhiututtuuusqomknopsqrstuuututsrqoponnmlkkkjjì∞ÑÅÅÉÜåvWY[ZZZZZ[YZYXXYWWWWX[YSg_[CGGEHGHHIJHILJLLLNNMMOPOPO:(EPPRQRSSSTUTTTVWVVVVXWXVYXXXYXYYZYZZZZY[[Z[Z[[]\[[[]\\^]]^_]__^^^____a``aabaabababbaabaabcacbbabbcccddddcbcddbdcddccdddcdccdcdbdbccbcdcccbbcbcbbdb`Lhiuuuurqopqrsqtttuuuutvsrrqpoonmmlijiihfddb`à≤ÜÅÅÅÖåwXX[Z[ZYZYZYXXXXXWWWWWYYQÜ_FFDFHGFGIJIIHHLJLLLLOOOOPP3+HOQPRRQSTSTUUUVTVUWXXWWYYYYYYXXYYYZZ[Z[[[[Z[[Z[\[^][]^]^]_^^^]^]__^```_aa``aaababccccbdccdcccdccddddddddecdcdddccdcddddcddedccdcdcddccdeccbbabbcddaKggqsttuvwvwxxwxvvssrqponommlkkjjhgfc`]ZUROLKx∑àÄÄÅÑäwYX[[[ZZZYYYXYXXXXXWVWVXVeZECFGFGFHIHIIIJJKMLMNMOONOP,-KOQOQRSRUSUUUVWVVWXUWXVXYYYYXYYXXZYZZ[ZZZ[[\[[[[\\Z\]]]\^^_]_^^^___a_`a`a``baab`cbbbbcbbcdccccacddcbccdddddcddddddddddcddddedbdcdbcddcccbbbbabccccaIghwyy{yyzyxvussrqpopnnmmmiihfda^YURNLJJMOQTUwΩäÅÄÄÅàyZU[\\ZZZYZYXYXXWWVVUVVVUQOCCEFEGEGHHIJIIJJKLLMOOOPPL%/KNPQQRRSSTTRUUVVXVVVWWYWYYYZYYZYZ[ZZ[Z[ZZ[Z[[\Z\\^]]\]^^]^]__^_______a`_a`bb_cabacbccbcccbcbcdcdddccbddcddddddddeddddddddddcddcdcccdcdbcababcbbbbdbKfhy|zyxvutrsqppnommljihec_[WRNKKNORUUVUTTTVVv√ëÄ}~ÇÖz\UZ[Z\ZZZZZYXXXWWWUVVTTUSOCDDEGFFFGIHJHIJJKLLLMNONOL"0LPQQRSSSSUUTWTUVWVWWVWYYWYVXYYYYYZYYZZ[[Z\[\[\\\\\]\\^]^]^^]______``___`a`aa`cbcccbcbbbbdccdcddddbedddddddddddddddedefeeddedddcdccdddddddcdbbbbbcccMefvwtttrqpppnmljifc`[WSPLNNQTVWVVTUVWVWYZZZ[u¿ïÄ~}Ñ{^SZ[[Z[ZZZYXYWXWWVWVVVTTTSCBDFDEEDFEHHIJIJLKLNLNNMQL 4NOQPRRSTSSUUUWUVVUVXWWXXYXYYYYZXZZZZY[[[Z[[[[\[\[\]]__]^^^^]^^]___``b`_babb_`bcbcbccbdbcdddcccdddddedeedddddeedeeeeeeeedeeddddcddddcdddfdccdccbcbcbJefrsrrqooljfe`\XSPNNPTWYZXUWVWXYYZ[[\\\\^^^_qƒòÄ~}}É|`S[[Z[ZZZZZZYXXWXVVWUUTUTTBBDDCFFHGFIHHHIKJKJKMMNNNF!5LOOQSRSSTTTTWRUWUVVWWWYXXYZYYZYZYYZ[ZZ[[[[[\\\[\\]^^^^]`____^__`_``_```b``abbcdbcbccbccddddddddcdedddeddeefeefffeegeddgdedddefdfcddddedddcddcbcccdcLdfoonlhc[SSRONQVY[ZYYXXYYZZ[]\]^^^^^^_____``n¡úÅ~}}Ä{bO\ZZ[ZZZZZYYYXWXWSVUUTTTSEBBCDFEIFGFGIGIJJKJJHKMMMF$:NNPPRSRSSTUTTVUVWWWWVXWYYXYYYZYX[Z[Z[ZZ[[[[^[]\\]\\]_^^^_^\___]__a_aa`ababbbbabcbbccbbddcdcdcddddeddddeddfeeefedeffedfeefeeededdddddddddccdddcddcdcOcdb^YUQNPSZ]][Z\[Y\]]_^__`____``a`_`b_``baaciΩüÅ}}}Ä}dT[[Z\[ZZZYZYYXXXWWVTWfVTT56<L>&17@CEGHHGIIJJKKLNNMA&>NONQRSRSTTTTUUUVWTWXXVXYXXZYZZZYZZ[[ZYZ[[[Z]\[]\\]]]^_`__^___^_``_```aaaabbbaccbccbddcddcdddeddddededeeeeeefeeeefdgefgedeffeedeeeedededdddcdcccccddOcdVV[aa]VQ\^^^__aabb`aabaaabbabbbbbcacaccbcdk∫†É~}}|gTZ\\[[[Z[ZYYXYXXVWVQcfbUT *+%,: "#"#&)-149@CHKKLNL=&?MMPOOQRRSSSSTTUVVWVWXWYYYZYYZZZYZYZZZ[[Z[\Z\[[]]^]^]]]]^^`]____^`````aabbbbcbbbcccccddddceddedddddddeefefeeeddegeefefffefffeeedfeddeeddeedddcdddcddQcda`^__`\Tbddedfcedddcddddcddcdcddddddddddeej≥£Ç}{~|iU[[\\\[Z[ZZYXYYYXWWM\EWUU"%.$"( !"!"#""#$$&$%&+/373',BLOPOPQPRRRTTTUUUVWVXWWYXYXXYYYZZ[\Z[\Z[\[\\[[\]]]^\^^^^`]_______````aaa`cbccadccbcccddddddedddddcdfeegeefeeefegfgfffffefffeeeffefffdedeeddddddecccdR`eefhhhhcYeghffffggfeeeffgedededeedeefefeffgl¨•Ñ~{|}zjV[\]]\][[ZZYZYYXXXVKQCJ_T" !""$"" ""#"#$$%$$$%$$%%&'''*.26;AHPRRRSSRTVWVUWVY[XZYYZXZZZZZ[[[[Z[[\]][\]]]^^]^^^___^__`_a_a``ab`aabbbcbccdcddbedddgdedeeddedeeefffgffgdffegggegfggfghffffeeededddeedddddcdccQ`dkklllki\ijjjiiiiiiihghihhghggggghggghhhiigl®•Ö~{|}{kXZ]^\\\\[ZYZYYXYXWWKYHEbV"!""%$""""""##$$%$$$$$$%%$&&%%&&'(()+),28<AJPQWVVXXWXXYYZYXZZZ[\[[\Z]]Z\\]\]^]^]_`]__^^__`_``a^`baabbbcddcccccbcbddeeedddededeffeeefgfeffgggfghghgggggghfgfgffffedeceeefededcdddSadmnoonnm_imllkklklkijjjjijihiiiihihhiiiijjjm°©Ö~|||{lYZ\\^\\\\[Z[ZYXYXWWL\]@VV+*-))(&&%%$$%$$#$$$$%&%%%%&&%&&&&&&'(''(()*+,+.4EVXXWYYYZXZY[ZZ[[[Z]\[[[[\\]]]]_^\^_^___`````__`aa`bbcccccbccccccddddeefddfeeffeeebfffgggffgghhhggggggffgghigfffieeefefefeeeccddV^dmrqqqpqclnonnnlmmmllkllkkkljjjjjjklkkkllllmü∞áÅ|z{zl[Z]]]]]\\[[[ZZYYYVXOTuKkY+++++*+++*++-++*+)''&%&&%&&&&&&'''&(()'))())+)++5VYXXY[YZYZ[ZZ[ZZ\[\\\\[\[]^\\^^^__^^____``a``a`a``aaccbbbdbddccdddddfeeeeeeefefefefhgfegffgghhhggghfgihehhggfggfffffeefeeeeeeedV^dotstsssiopqqppponponmmmmmmklmllllmlmmmmmmopöÆÖÅ|zzzm[Z]^]^\]\\[\ZYZYYXVQMsnx\+,++++,,,,,-,,...-.....-.--+*)(('((((())))(*)**+3VWXYZYYZZYZZZZZY[Z[Z[[[\]\^^_]^_^^_____``__a_a``aabaabcddcdccddddedfeeeddefffefeeggfggdghggghghhhhhghhiighggfgehfhggdffeeeeeeddX`dqwxvuvulttsrsrqqqrqpoonnnnonlnnnmononnmoopqó≤ÜÅ{yyzn]Y]^\^\]]]\[[ZZYYXXSHrz|[+*+++*+,+,----..//./.0//0//11/0010/./-,+++))*+++/PWYXXYZZZZZ[[[Z[\Z\]Y\\]]^^^^^^_^__^___^_`aba```abacbcccdbbcdddddceededdedeeffffffgefffhhhhhgghhhhhghihhhhhhgghghgggfgffedfeeefX^eqyzyxxxjswvuussrstrqqqqrrppoooonopppprrwy}Åú∂ÜÅ|zy{o\W^]]]]\^Z\\[]ZZXYXUI^}|Y+++,,,,,-,,-.-././/1/00/0101111212223433332211/-/KYYXXXZZYY\ZZ[Z\\\]Z\[]]]]]]^^]__^__^`_`_a`aa``baabcbcbccccbddeedddeegeefffefffheeegfghhgfhhhhihhihhhhhhhiehhgggghhggffffeddeee[_dr}||zzzpvwxxvuvtuuutssrsrrrprqquy}ÇÑáâååççèüµÖÅ}yyzoZW^_]]^]^]\^[[[[ZXXXNPz|Z+++,,-+-,....-../00///0011112313343344445454653,.GWXYXXZZ[[\[]^^]]^\^^_^^^___^^^`__``__^_aa`a`abbaabcabcddcddddedddeecdffedffffffhffghhihhhhhihiiiiiiihigjgiiggihhhhfggfffeedeeeZZdr~}}||oxyzyyvxwvvwvvtttssssrssÑãçéèèèëèèèêü¥ÜÄ}zxyp[W^]^^]]^]]\\[Z[ZYXXSRwxW++++,,,,,,...././000010011221322445446555566665..AYX[Dt√‘’¬™¢úóöóììòôúû¢ß∞¡ ∆¶dJ\b`_____````ba``cb`b`cbcbccdccddcdedfeeeeeggefgeeegfgigghghgihihiiijiiiiiihhhhhiighihgggfgfhefff[YdsÅÅÄ}ku{|{{zyxxxxxvvtvtvutttvÜééëêêëëíëêëùµÖ~xxyq[U]_]_^]]]^\\\[\[YYYWSjjS,,,+,,-..-.-.-.0/00/0102121224333435555555566760-ë∫§õëåáÉÅ~~~~ÄÅÅÇÉÖÖÜâãçèíïô††ùœÛ¨K_``a`aa`aaababcccccbcdeeeddddefeefefffefgggghggghhihifiiijijiiiiiihiiiighihihhhggihggggedf\XdrÉÉÇÇÅÄju}~}~|zyzzyzxxwuxvwwvuvÜêëêëëííííìíû≤Ü~Äywyp\T^]^^^]^]]\\\[[[ZZYYVSKS+++++,,.--..//000/0011112323333444345567866779Ä®õöçàÉ}{ywwwvvvwy{|{ÄÇÑÖÜààãåééêìóîóú≠”Xa``_`aaaaabbbbccdccddddgfceefffffefgghgghigghiiiihiiiihiiijiijjjiijjhhijihhhhihihggfgff]WcrÖÇÉÉÉÉou~ÄÄ~~||{zz{yxvrqljedhlÅíìîëìîìîììüªEy}yvwp]T_]^_^^]]]]]\\[ZZZYYXROU,+,,,---,...//0//0101222222334344445665778878|îêâèÅ~{yxvutwuuuxxyz{|}ÄÑÑááâäãåçèéêêëíîñ¢≠b`abaaaabbcdbcccccdddddeeedefgffgegegfgghgihhhihhiiijjjijjjiijijiiihiijhiihihhhgggffff]VbrÜÜÖÑÜÑpvÄÄÄ}zxrmgefhjknoqsuwwxÑíììîîïîìïïëj_@yÄyvvq^R__^^]^^]]]\\[[[ZZYZXXWV+,-,,---.../0///00021212222344545655579787987Öäá}åÄv}|xwvvxuuvxxxx{|ÄÅÇÖÖáàãåçåçèèèêêëíìúr`aaaababbcccbcccddddeedeeefeefffgfehhgiihhhgiiiiihijiijikkjkikjjijijkijijiihighiggggf_VcqâáÑÇzkdgddggikloqruuvxxzyz{x|ÇíììíììîìîîìàiQM}yuuq_S^___^^^^^]]][\\[ZYYYYXX+,,,-,-.-....1//11112233424354545777676777898ÄäÜgçÅy}zxxutwuuwuyxz|}ÄÄÇÉÑÖáàäääÉääéèèêííñöãa``aa`abbbaccbcdddddeedfeeefdfhgghgighhhhhhiikhhiijijkjiijkikkkkjjjlijjihiiiiiiihghff_Tbdhffghhijkmnpopqstuvwxyyyz{||||Çêíëíííììííìòàk4eztuq_R^____^]]]]\\[\\[ZYYYYXW+,,-,--......1001111333333335355567798767798:Éãà|ç}w|zxvvuwuuuwyyz{}ÇÉÑÜáàââNkàãçãëïôûva_`aa`aabbdbdcdccddddeefegfefgggffggghgghhihjjijjjjkjjjjijkjkkkkkkjjjkjjiijjijigighgh_Sbceikkllmmononppprstvyyz{{|}~}}}Åéëííëíííìììó¨g[;qusp`S_`_`_]_^]^]][\[ZXYYYXWW,,,-.../.../0/002113233443545565777897778798:ÄàáÄå}y{yyvuuvuuuvxyz|}ÄÅÇÉÑÖÜÜÑnmynkÜàÇf]ëôûma`abaaabb`bbcbcddddedddffgffdfgggghggiighhhihhihjkjjkkkkkkkkkkjiljkjkkjjjkiiiiijhfhgeaPbbbfhjlmlmmnooppoqsuvyy{}}~ÇçêëëêêêëíëíïßÑcNGptqaT^``a__^^^\\\]\\[ZZYXYXW,,,--..//..//11111123444544456657678887788:8<ÅÑàÇåzx|zxvuuuuvwvyyz|}ÄÇÉÑÖáÖrÑàá~n{+.6çóöma`aabababcacdcddbddeeeeffefggfheggghhhhiihhiiijhjkjjjjjkkkkkkklklkjkkhjkjjjjjijiihhhi`Rbaacdfhklmnnooqprstvxy{}ÄÅÄÄÅÉåèëêèèëëêêêí£äib7VrqbT_```___^^^]]][Z[ZZZYXWX,,--.-../.0000112333345445556666678898887898;ÑÅÖÉâwzzywvvvuuuxwyzz|~ÄÄÅÉÖÜáÉ>ÇWÖÄq]Z,.30înk`aaa`aabacbbdcddededddefdefdegggffhighhhiiiiijhiijjjjjlljlkkjlllklllkkkkkkjjijiiihiihbQa`aabdffhjmooopqqstwy{}ÄÅÉÉ{gÇÉãéèèèêëèééêí£çw`X=aqcV`aa```__^^^]\][[ZZYXXXX,,-.-..///1/111121334364455656678889:9:998::8Ç~ÑÉâyzzxwvtwuvuvxyz{}ÅÉÑÑÖáÇQÅ|ivÅa<-.4:ãùfaa`aa`baaccbbddddddeeeeedfefeggfgghiiihhghihijikjjjkkjjjlklkklllllljlllkljkjjjjijihhh`ObaadbddefhjlmnoqqstwzÉÜââàçÜsiÑããéçéééèéèééèüåxpaHIkfZ_caaa`_`_^_]]Z[\ZZYXYWW--...////0/0112222344555565677788989:989899;<ÅvÖÖâsz{ywxuwuuvwxyyz}~ÄÄÇÇÑÜáÑ;Sj]Çn2,13@Ä{fa`aabbbacabbccdcedfdddeffgfehfffghigigihijjhjjkjkjjcl^himkllklklllklkklllkkkiljijiihhcOa`aaccdeffhilmpvyyÇÄ~~zz~lQbrgÉóçåééçççééçååúãxvf\5Se[`bbabaa`_^^^^\\[ZZZYXXX-../..0000011222333545566566678999::::999:;:=wrÉÖàfyzyxvvvvvvwxxz{}ÄÅÉÑÖÜáÖtv{qv}:G.SS>Äêd`aa_a`acccabccccegÖrsuritnigigbb_`^Z]\XYYYWXUSZYUVWUURMPowÑÖnllllllmklklmlmkkljjiiiiicLaa`bddfeffghh~ƒ≈õë±ú©∫æΩΩ¬òE_nqcXÇççååååçåååéòçxws_S;TZ`baabaaa``^^^]\\[ZZYXXW-2..00//01/11223334366666687779::::;;989::::@sxx|~gxzxvuvuvuvxxzx{|ÄÅÑÉÑáÖÑL0=QPso0/4>Äe`aa`aababacd|úrOIF=OLMOONNOOQPPQQQQPQQTRQRPSRQRQPOQOQONPMQXcmyármmmnmmlllllljkjjijjiicMaa_bddffgfe_UqåÑtmnfgi_]WQG3@atdJ{åãåååååççåçóçwutj]@>V`ccbbaaaa`__^]]\[[[ZYXX/.../0/001013334454465557878898::;:;;:;::<;;@quvxvoonoqrsstuwwyyz{y~ÄÇÇÇÇÄ|ymYeErxxH7:yÖÑ_`````baan•L5--Pé≤∂iVNLNOOONORPONUG@HHHKEDGMRRVc\^dam`fT];=ADHMUcyÑmlmklimmlkkjjjkkjjifMbbc`cfggfXI>7>FAAF;313,)).)'5^rcFwçççãçåçååãâïãvtsp`Y2B_ccccbaaa`__^\]\][[YYXW./.0000/11212243464667677879899::;;;;;;:;<;<<suwxvonjjiijkmortvwy{{z{{{zyvwxywibkt|ÄzJ]ãèTe_`_`ahiJ™∑®sqlåááyDSûúùùüü††¢¢¢§§§§••¶¶•§¶¶¶•§§§£§¢£¢°õÄU[eiI:><BXnmlmllmllllljjjijjeNab`]adghge_VHD-(',*()((-CV<,5]qdFyñõ¢£èåçåããàìãwrrql`O5Rcdcbbaa`__^__]^][[[ZXY/..00/0001223334656768787999:::;;;;<;;<<<;;<@rwwxupmjighiiiijlmpswuqijuxyy{|~c_ayéÜEqàêtc```abYHLàáäkggáÑÜvG@Iâúüûùú°ûõûúõõôóòëñìèéééåååäàÑåàà{uzIHI||{^afÅÄÑnmmmmlmlmmjjljjjigLab][^bdffbbge`<**@=6310Eim[=;\oeEÑ≠¥π≤£úêååäãëävsrpof\67adedcbba``__^^]][[[YYY.//0111101134455667789879:99:;;:<<<<=<;;=<==>rwxzxppSfidnoonmoqvxxk>--yÉÑÖÖÑÉÄ}|~ÅÇÜysÉêgba```a[JPáâáhfgÜÉÜtDA@BiklkkQSRRRjhiiiDBACGiiiiiPQQRWqrqyFIH~||^`_}|rmmmmnmmmmlkkjjljieOaaa\\bedbbfhhpY+-QG:654BghM67WhdT¬ ŒŒÕÃ¶ããäãíävronmj]T4Adddcca_a`a__^_]\[ZZXY./101211123334585878889:99::;;;;;==<==<==>>?9{q{ÑÉaqiYY^jlnstvx{zwE))-wÅÖÜáââääâääâÖÑÄ~ÅÖâc``__`ZJQÑáàgggÑÉÜqDA@DifgggPQOQPgffggEA?@FhhfhhRQQSXooqxFHI||]``}}nmmmmmlmllllkkjjjiePagÇ|pvq~gfgmâncNWhaY[adinlQAFOPLM_í¿œÀŒÃ™ãààÖ{tronmkc[F5Vdddcaba```_`]][[[ZXY//2121112334656788899:::;;;;<;=<<=>=>>?>>>??;sk{Ñf.^4-epsuvvxz|{zs[AgaxÉáâáäãããåéåãäâáÜÄÇb`_```XKOÑÖágffÉÉáoHIIFhggffRRQTQhfgghDBADHffgfgQRTUXnoqxXHHÇ|}da`}}xmnnmllmmmllklkkjkfLbgÖ|ÄãÄÅsmlflihgggdccabc^J?<>@CEGAJ|°öéÄo]XUOiqsqpnlkcZY06bedccbba``__^]][\[ZZ/012331233556677888;::;;<<<===>?>>=?????>?@@9Jsyxtoa4*5lsuuvxyy{|}}wH/*7ÉÜâääãååååäââàÜáÇá``a_abYLOÄÇàL>UÇÇÜN66558lihiZ555559liiCQ44444ShjSWQ3564FzHHQhy{d`_~|ummmnmmlnmllkklkjkfPbafb`[YX\\]_adginnpqtstrjA559@?C?:6@?=31/+3?BcqtqonmkcW[Q3Idedebcaaa`_^^^\[[ZY100232334467677899::;;<<====>????@@@A@@@A@AA:*wwvtad4(:Mclqtvxz{}~~zH,-rÄÖàâäãããããàâàÜÉ}w}aa`c`aF<IÖ?_zE<É^dZVWXO5RjH9[UUVYF6bj5>[VSU[44nX6=cXZb:8K[90;:j_i:3|pnnlmollllllljjjifPabfhieagifeb_\YWRQKIFDB??9217;><:529>M311+/7;\jtpnnmkdWY\;5`cdccbaa```_^\\\[ZZ/01244344466779::;:;;>>==?>??@@@A?AABAACABBB<'w|}k+]jllgV+Kmswzz|~Ä|ulrL}àâääâäáäàáÖÇwmiv``_`a`Z[Fy6fjkgk\lkM=ASWX5~YW\I9DWUZ3PZV\FANYUM;3YWaUU_XfL6`a`f8a:pl]mnmnmnmmllllkkjiifOa^IFC?><9754321001012112874661001024=U756/-13?XqpmmlkdV^\W2>eddcbac`___^^\[[[Z213344456678989:;;<==><>>@?@AAAABABCBCBBCCDC:"zÜlWwyyxutspc(bty{}ÇÄÄ}T+*UÖâäàááÜâäáÉzmhek_`ba`aBF^ñiC@A>jõò<88847TÇÅÄ5569766YÅ~637873:bÉÅ\648743bìÄ@==Ycm_lhkmnmmllmmlmlllkkjieM`\;43554442101121033434472042-,-////8G8651-211KqpmmkjdX_d]H3Reddcbbb`__^[]\\Z[223445576789::;;=<==>?@@?AAABCBCCCDEDDCEDDED;#~ÅR}}|zywxxvsm9]tz}ÅÅÉÄs1-~áâàÖyLxáàÇ}rhedj__`aaa?:4ëù>BB=ol•;:8775WÇÄÇ6567765rÉSÇ/568674ÉÉÅÄ5988852éí:?=;|ì39=`mmlnnnmmllllllkjjfOa_PLJGFCEF8.02233344544;C7122/-/1.-.6M9662-430LpnllkjcW_i_Y39bedccbaa`_^]]\[[Z3444566778::;;<===?>?@AAABBCDDDDEDEFEGGFFFFE<(x2|ÇÅ~|zxwwwwun0gw}ÄÉÇÉÉÅÄÖáâáÇ(.aÖÜÄxmfdcja`aa`a=<YçôTiquxedxÄÅiab``__^_^^b`Cb``__`b_fdfiuÖÅ~ÄåvâT959úìV=;almmmnlnmlmllllkkigQ`qœÕ∆¿π¨¶òv614554555768JÉiAC?83461.9[Y9864/440KomlkkjcX_if]P2Efcdcbba__^\\]\[Z44466677::;;<==>??@@BBABCCDEFFGGHFGGGHHGGHHH=%zjÑÇÄÄ}yxwxwxxul(pz}ÄÇÇÑÉÑÜáàâàÜvUTÇzrjecbk```_aasGVLMQ]PRRZZ°ÇÄÄ]]^a^^]\]\]^6]]^]^]^fbe_^ÉÑÉÉÖçINdGHaNNMOSglllmmmmlkllmnnÅkmfPaz¯˙˘˘˘¯ˆÔ—F4677678689;AÄëf_f\TRKA9Q|]<:950562LomlkkicY^iha[<4Yeedbb`__^^^]\[Y45667889:;==>>>?AABBCEDDEFGGHIHHIIHHJJIIJIJJ=%w~ÖÅÄ}}{ywuquwxt]Vx}ÅÇÇÑÖÜÜàâãàáÇ..||wmheebn_`_`aasHIZSNXQ[UU]£ÖÄÄÄÅÄ_]b]e^af^\\^6]]]]_aaa_^_`ÅÉÇÑÑÖéMMO]IbLJMKAtlllllmllmlsõæ¿≈‘’uPbmı˚˚˙˙˘¯ÛÿE698989::::;=XtÄÄçìëéãrPToR=;;92753MomkjijcZ^ijg[U0;bddcbaabd]^^\\[556789::<=<?>?AAABCEEFFHHHHJJJJKKKJKMLKKKLLK?&-ÖÑmt}}{yuU<_vywr&s}ÄÉÇÑÜáààââäàázfgtrkgedbn``_`a`nJLOLLZPQV\WòÉÅÅÅÄq\_[^_^]^]]]7^]]^^]``d^aÅÉÉÑÑÑÖèGKMNNcLPQNVslllklmmos£ º©ñùŒŸΩRbxı˙˙˙˘ˆÙ’G8;:;;;<<===?GpêôòïíëììrPOF=>?;3:55MokkjjjcY`jiid\I2Nddcb``de^^[\[Z47779::<<>>@A@BBDEFHHIHJJIJLLKMMNMMMNNMNMNNM@28áÑ*j}|{zu38rxxyt6l}ÄÇÉÑÖÜáâàääâàÉ_/lmihdc`h_aa_``mJLNKN[TSW]YñÉÄÅÅÅÄ_c]c`c^_^]_7^^]]_d_i_`_ÇÉÉÉÑÖÜéÉLXJMcLKLXÖmklknlsêÃª°á¨øºπ∞±ºWbpÛ˙˘¯¯ˆÛÔ‘D:>=AKQLMDCA@Dyä|d\UPNW[RHA>A@<4<39NnljjiicZ_kiii_X/8bddcablf^]][\[78799;<=>??ABCCCFFHIIJKKLLNNNOOOPPPQORPPRPPP@GaâÖi||{ywsrwyyyv_bzÄÇÉÖÖÜàâââáÜÉwgnhWcb`[e`_`_`amFGHOM\QZQS|ôÑÄÅÄÇl`cb^_a^]]^5\\^^bb^_`fyÇÑÑÑÑÖÜëîWKGR`LRMLîgkpòª≠ñávmkü©òò«†úéXíqÛ˘˘˜˜ÙÒÓ’G:?OP_efj^cYTR[_QB@@@ACFGGHEFJNe`;8KpljiiibZ`kkkjh]O2AbccfwÑk]]\]\Z889:;<=?@AACCDFFHHJJLMMNNOPPQRRRSSSSTTSRSSSR@kqäáÇÅ~|{wwwxxxyywhIpvwx{}ÅÇÉÖÖÜÑÑyslc\_YXR\_`````l^MLQR\\WZ\°òÉÄÇÄÅ^ab]UZa]]_6___dcbcde`ÇÉÉÑÑÖÑÜêìMQRVaNYO[ìr¥≈øÄlhiiiÅ°êîª∞®π≤õzpÛ¯˜ˆÙÛÒÓ‘B;@FmQbTP\`OgjOC>>>==?ABBACBBH_ë£ÜANnkjiihd]`llkkjcZ95XchuÄàzf]\\[[9:;;==?@BBEEFGHIKKMNOQQQSSTTUUUUVWXWWWWVWUVTBrxäÜÖÅzneiotxxzzzxl>koqrruvwxyzyxvsnhbXT<:DLS_`__``hkEMIM\NOeVúöÑÅ~ÄÅÄÅÇt_c_Qcf[__8^]_^_`e`_|ÉÉÖÖÖÖÖÜêìDLMK`NKQ^îœ ƒΩÖuÄéûß®´™∏µ®´©é|eoÚ˜ˆÙÛÚÔÌ—ÑäëîúW`TQdZLb]NBXÖym?>>=;=?@CWàûòdJmllihhb]alnllkk^S/=j|ÅÇãÇr_\[[\:;<<>?@ABDEHHIKLMNPPSSTTVWWXXYYYZZZYZ[YYYXYWAtzâàÖnrxwuoVtxyyzxk@loqqstuuvxywtsold`Y>:@BDO______knONPL[PVNOúóÉÄÄÄÅÅÄÅÅXGCNMfa]]7_^__d`^_fÉÉÖÑÑÖÖÖáêñâZ]^`JXLZñπ¡¬Ω≤∞µ±ß≠µ¥ƒ∫´ùïõÄgs}ËÛÚÛÒÓÎ éíìíéG28CGDRyaIBVçäÑx@?>?>>>>@RtêÖfYmkjiiid`annnmnlg\B7[~Å~àÉ}m\VY_;=>>?AACEFHIKLNOQRSTUWXYYZ\\\\]]]]]]^^]]]]\\Vuuãárz{zxtlVuyyzymNloostuvuvxwutrojda^YXTSNW__^`_`if?WNOZQWPìöñÄÅÄÅÄÅÇÇÅJMDKIHbW`8_____e]`ÇÑÖÖÉÑÖÜÖáíîs\~PcPNKòñπ≈«¡∑®¢ß∏¿ΩÀ≠©õãììZX[^dfimovnzÄêñôòìI:?LWJsÖÇsQbîéÖÑÄ|y{wrnd^jÇxf`mkhhhgdacnoponmlaV.=Å}Ñ}Ä}^e{Ü=>>@ADDEFIJLNOQQTTXYYZ\]^^_``_aaaaaacbb`a`_^hvgäáÅ;rwwsk4:vyzzvW]npqruwvwxyxvtroiea`][YVRW^___^ZjI;GbKXOMPîôìÄÅÄÅÅÇÅÅ]MCDtFcH_^7_^_``__ÑÑÖÑÑÖÖÜÜááëìVdfpkSNPìî÷ º•†´æ≈∆∆»´§õâõ¶óSRRLKLLKKIKKYèôúûöJTDYab~ÇÄzWYìéÉ~|ÄÄÇÉÇ{z{vwtmX\liihhgdedoqqrpoooZJ6Q|yÄwxÖï°¢†>?ABCDFHIKNOPSTUYY[\^``abddfeeffffffefefcccbewFâà+,IU<,+fv{zzr$forqrutvxxyyxurpjfcb`_^\WK__VKLHl=:F?MZNSÄìôîÉÇÅÅÇÅÅeEKQHTEKZ9`]^_gaÅÇÉÑÑÖÖÖÖÖÖàíqcgmdOV^ñó’©õ•Ωº∂Ø™®§öûè©µùìTROIIKFC>>GHOÉçåäÜJ`jdgjwÉ}o=Zîìác^cihkehhda^[S>HljfggeegdpqsrrrsÅqX4<kyÑâïû¨∂æ´=ACCEGHJLNPRUVXY[]_`cceehhijjjkkkkkjkijihgggWx1ààÑr)))*9itxyzwi=lrrsuuxyy{{{{zxwsnkjheb^UOMHLE>;l\pOCW\XLëíóìÇÇÅÇÅÅÄÅÅÄÅÅ`GBjDb5_^_j_Zo|ÉÑÑÖÜÖááÜâípìïccaQNôññóí´§ù¢©¶ïî{åéòèîâUQLIII@9<CGGGuãçéãO]BScjinjhPTëèÇBDJKPPKNMOPTPA8Gjihfffdhfpprrrr|ãá^P7IåûßÆ¥ºø¥™@BDEGIKLOQSVXY\^acdfghkllnoppppppqqpooonmmlkuÉRÖâáÄyqnpuuxxyxn-nvz|}~ÅÇÑÑÜÉÖÑÉ{wqnlifb\XQME:533mnqJ@ddtU_`óìÇÄÄÄÄÅÄÇÅÇÇÉ}OgGGpYjkiRSS`d]{ÖÖÖÜÜáâäìóòómcldawÅóû…¶∏ŒÕ∞éñçtgigÅãïpRNJHC=:?FGHHJtëîóîWfkNgotpwI4Xéã}758:=??@778;=87FiigffedifqppootÑãçÅY;Lz≠∑¬—Õº≠°BEFFIKLOQTVZ\^bcfgjlmpprstuvvwuuwuxuvuutssqqzäáyÖÖÉ~|zxyywwuo1jx}ÄÅÉÉÖÖÜáààÜÖÑÄ}xrplif`]YPB636=MjnoJ?pZx?ÖUQêÉÄÅÇÄÄÅÅÅÉÅÇÅTfKYjYXXqJIÑz_SPZÑÖÜÜÜáâîôòô}picfñkë“”∆”»òtfynkkpnÄäç^QMD>=C@FGHHGLuìóôòS[CPcp^yÑ]3Xèéx333567<?1-,+)47BiihededfepsqpoyãêîõeRDt±√»≈√∏≥¶DFIJLNQTVXZ^`bfhkmrrtwwz{||}~~~~}~}|{zzywt}åâ+}ÇÄ|yxyusnX-oy}ÅÉÑÑÖááâàááÖÉÄ}xsolhe`]W\=BVcbbjnq<@GKC;ãPGìÅÄÅÄÇÇÅÅÅÅÅÅhCFGEG[orKeFÄÉMTOLZáÜáááâîôôáifgqiôpÅŸ◊∆±òåkfflsyxrvàÉSE=?EE@DFFFGDIqèêåäM^krjfJiàp3Vììf:KOVSSJ;8/+(*8:PjihffddicorsqsÜíïõ•ù\C}ì∑ªºøø≤™FHJKNQTWY\_cehknqxxz|~ÅÉÑÉÑÑÖáÜÖÜÑÖÑÑÉÅÄ~{ÄååÄ%ltwsqoi]9.brx}}ÅÇÑÑÖÜáááààÖÉÅ|ysokge`]VW=?DGNUjmG<]E?>eåNéëÇÅÅÇÅÇÅÇÇÇÅÄKHGGD[EHMHNYaÑáNNhÖÜÖááàäñúõhkwr~íó|ù◊´õîúr`cd^SSSPwâkI:EMGCCEFGDCBESåóîîL\cDemPiás7WçâT09BCHJD:453/*07Jjihedddhbkoqo~íòüßÆ∞wVAx≠∏¥ªΩ≠§GJLNQSW[^achknrv{}ÅÉÜàáäååçççèèèåéççååãäáÜÑÇÇåçÖ<*+! .C-Zkrx{|}~ÅÇÉÑÖÜÜáâàáÖÑÇ~wtolhea\VK/0//12lm<<DJVCDBåíéÉÇÅÅÇÅÅÅÇÇÇeDEGHFXHFJG\gF|ÉzÉÖÜÜÜààââòü¢mk^qanu°¢öóóáj_dd^OEBI`~~D:7<A3PÕÓÊ‰ÂÏÌÔÏÏÈòNY^bms[tÇr8WçáE,09?@CB82/-+'/:Kihgdeccd^hgiqåõü££ß≤´\M\á≤≤∂æΩ∫JJNRSWZ\aegmqu{|ÉàããçëíëìïìòïôïôïöìèîíêèãåÖá|åçGfi*`hY*U0mvz{|}ÄÅÇÖÑÖÜááàààÜÖÉxrmkhda[UL<99998la=EEJWJJEjêçÇÄÅÇÅÅÅÅÅÇIL\J[]]9_^WEKFIÇÖÖÖÜÜÜààâäô†ur\Yn[]nô°vrrkjac`XSV[PTSZU@ø‰’——  ‹ÁÔÚııııÚÎ‰ `Jgf[eÅo9Uñî>,,37:;;;2++();CKiigfedb\[a`\Xa~ö≈ƒ∞π•xÇéÜâãèïù•79:==@CFIJMPUX\_dgkmoqqqqpqqrrtututroqonmmljväçÄHV*VD[Q8\Qty|||ÄÇÉÑÑÖÜáááááÜÑÉÄxrmkgd_ZSL@?=;:<hXmDDIRJKâRêçÇÅÄÅÇÇÅÇÅÄJKH[]^^^:_^]^[GNGÅÖáÜÖáàáâåö†pùYYp\Z•u†WW[^_YSQc_^[[hàÿøººΩº¡øŸÏı¯¯˜ˆıÛÔÌÍÁ‚ÿân`Tfzd6Tòå1+,.00002/)'('1?Liheded_WW\XQB39LåöìênãÅcuxrnwÄ9@MVQGEFJNQTZ\bfjpuw{{yyxxyyz}}Ä~|ywvuuuutsxäçâÉÅ'otn$PL,kxz|}ÄÅÇÉÖÖÜÜááäàáÜÑÉÅxqnjgc^ZUJ6:.-9>gkmCDHQJKÄwçãÇÄÅÅÇÇÇÇÇfUQ]\]_^_5^__^^_]ÄLÖÖÜÜááààäö†ü†YWq\ZÖúûSZ]\``UaZWhiæ∞¨™Øµ∑∫—ÂÌÛı¯¯˘¯ıÚÓÈ‰‰·‹Ÿ÷Õ∑vqwmT4Uñw@<@?GHKK=5.'&%+3Gihfedc`TQXVMB74@çõòóîqie}ñ°£¢•û50+%'*1=J[X[`chotzÇÑÖÇÇÅÄÄÇÖàääåâáÉÄ}|Ä}|zâààáåx;b7\oD=Gwz|}ÇÅÉÉÖÜÜáÜáâàÜÑÖÅyrnjfb^YSI:;9448hkmDEIOJJVâçäÇÅÅÅÅÄÅÅÅ|Xa^_^___9______hp]vÖÖÜáàââãö††õWUwYUTùùttxwvvuuw®´¶ü†£®≠∞ÕÂÎÔÒııÚÔÓÂ·Ÿ◊’——“ŒÕÃ≈æHXZF4X§•®©≠ππóqVK<74.,/9Qjkjfdd_QIo{}~Ä|áÑK4-2gqposqrlt::>?AIKD,$$).6CQdy|àÄvvljedgirujaYOHHGHIOQOGGáv|áä|)b3kvuoqxz|ÄÉÑÜÑÖááááàÜÑàÉwqmhe`]XRH6;77CSfjcBDGSHKOÜãâÉÇÅÅÅÅÇÇÅ__`_^_a;^^____`ÇÑÑÖáÜàáââåö††[WVtVUSúú_rnlrprÑ¶üîîóõù†£⁄ÊÍÏÌÏÎÍÊ·€÷“Õ∆∆∆«∆√¡ƒ√¬∆∆cMB4f¢£¢¢°¨≠òäÖÜíîåÜÖüÆ≠ùéêec_N@sÉÖàäâÜ~M*((,KSVX[\>7e///00002223433.*%&''08?GPYhb\OFA=:;;::;;;;;;>à+V}}u<r\hvxxyyxyx|{|ÇÉÑÖÖÖÜáÜÜÖÖÜvpkgc_\VCG;;?JG@ehGACGQHIKÜãäÇÇÄÄÅÅÄÇÅa_^^^^__:`^_____hÑÜÖÜÜááàäçöüûYUSqUTTòõEJKHIF£ùéÜäåèéóú‚ËÁÈËÁ„›ÿ‘“æ»¡∫∫∫∏π∫ªΩ≈«…»—÷◊L7x§õúíäêëäê}~ããÄuyzywy}ÅÜzfcM>[lqy|~~x@''((/+((++%%+..0011114453588;;=>ABAA>;0,'%'')+*+++-257=@D@{)NvugOjdYouvvuUPnj1q|ÅÇÉÉÜÑÑÑÉÇÅysmgc_\VM=HnWE@??cfC@BGPHHJÄââÇÅÅÅÄÅÇÅÅÄ^^_`_`^_8`__`^``aÑÖÜÜááàâäåôüùTRSoSQPõôpqrkp¢ìÖ~âêïöûﬂÁÊÂ·‡›ÿ”–À»¬ª±™†¨≤∂∏ª¿√Ã“◊‹‡ÃßKk—˛ÚîàÇetjÅxáÜÉáèèéÜÖÑxmÜçïóòõöùü§†¢Ñ*(((,,%'*****:05<966577>763;<=B:555A2:72005;5105458221<.4:o(Nun'1cC-7fkml`mkqcirtvuxxxyxxwtrnhc^[WRPERIƒÅ5468bf@CBEQHGJdáàÇÄÅÄÄÄÅÅÇp__`^__]`<`_____``{ÖÖÜÜáâàâçòüûQPNiPNOöñLMO\°à~ÜÖÅxssbﬁÂÂ‰ﬂ‹Ÿ”Õ «¡º∑µ∑∑ø¬Ωæ√∆Õ‘⁄€÷…ïàèK`©Øäå~Z2345457677:<=BBCIHMQX^fllqrçêy@677A:9?HP?%&+&&)'-77*-0<`]T1310957./1//8A223708:447:<494?+pruqb^c_#bdjkhToxzhRlqtuvwwwwwtrqmfa]YVRNIJKu<7-,+TKZ[KMTZ^nvÜÑ~ÄÅÇheeeffgffHhgghillqrÇÇÉÇÇÇÅÅÖéëváxYT[iÅòKU©üäsrojgceÑﬂÂ‚„·ﬁ⁄‘–Õƒƒ∫ººΩ≥ª¡¡ÃÕ◊⁄—Õ∑§ëPfiçôvxrtx|Ñx=88765124231/.//022122223457?>932425200//.+30/..,--.-././1244579999:;<<<>=<<;:68#+04DH2+uxvsmknl]hkkiIakutgO8qtrvvvvvvurrlf`[XSPMHBIPJ1/..SLXampuy|o|Ür}ÉÇ~~}Ä~nnYeorÑÅÄÑÑÉÉÖpqÑÜrqÖáâááâäãàÇcÄôõõöò~ï~öòzwefdcb`Z»“—ÿ‹‡‡‡‹Ÿ÷—–“Ã–ŒÀ—ÿÿŸÿÕµïÅ~ÇÉÜÉá}õPdcabbbdvÉ\E=5,../202234333323343222232211111/007rìì,)AGXdgijcYSEBBB?;:98:8:9<;:<:=:;<==9<:<<=:=?(sxxusqpnmlllkfd^cIhjnrtsvuuvwvuspjd_ZVROJHEA:7447<]UW>DnqrKit|r]ÅÅÅÇÅXmpYrnW{ÉÑÑÉÑÉoXp~ÖqsRàááäààdSÄjMuï]JìÖîylbaba^^_bØµ¡∆ œ“’€·‚·‡ﬂﬁ€€ŸŒŒ¬ÆõêçâàÜÖàãåãéèèKR[cwëöü§©®®¶¢ûùòîêåÖÅvnf\N@:2.&'+*+++,-,-+(*+2Luçö¢0011257877655579:;;;;<<==<>?>???@??@@BA@ABBCFdwywvsqppnmllklljG^moqsssvvuwvvusojc]POIEHFB9+**-CHGK4bD@@CR{mqÜHFIJOJHGLÇopmw[GHNLJLJIxyprqÜLJNKJIIKíÜ~éäLMJñDB:\\]^_^\[ÜUU\ãûÆ¬¿∆Ã–”—“Ã»ø∞•òëéÜÑáàÜÖÜáâäåçêï¥∑µµ∂∑∑∫ππ∏∂∑∑∂∂¥≥≤±±Ø≠¨¨™©®©®®ß©•£°†üùôóöûüü¢ü†ü¢¢¶•11////123:;;;;;;;::;;<<<>@=;<;:9577<CJMV]W_UMvxzywsqponmlmllmmklnppqssuvvuutsqoia[OGDDEFE9))(((-///2ejmsw?7>AÄÄjPLYvÄÅ`:eH;ÅÄ~aSYtÇÄ;DG<SÖÜÄvxÇÜâ}<7;{êñö887:\\\\^_^XVIP`NWwãññùõõóïëãâÖÖ~ÉÖÑÉÑÑÖÜÜáäååèíóππªæøΩºªªπ∑∑∑∑∑∂∂∂µ≥¥≤±±ÆÆÆÆ´´´´™´™´©©™ßß•••©ß¶•¶¶§••58;9<<;<=<943321.--*+)&'''''&&&&'&''(')('*(),uyzywtqqoomlmlkmnnmppqsrsrsutvtrpoh_ZPCP1CDG2()(((6/./0145764779:8t~ÉÅq?::9::::9T}ÑÄ~C:;;<;;;<3KlpS2=<99;8:977668^^[[YY[FGHDKEEElz|{vx{{}|z}~}~ÅÇÉÉÑÖááâãçèâü∏∑∏øΩ∫∑∑∏πµ∂∂∂µ≥¥¥¥≤±¥¥±≤≥¥ØØØ≠≠¨´´¨©™®ßß¶•¶•ß¶ßß¶§¢£!! !!!   !!    ""! """!"#""#####$##$$$$$$$&(s{|ywurppnllkmmlmnooooqqrrtttrrpnle]WGOM9BBG++,+..6//./113546879:8999:99CB999:;;:9;9;;::<;:;;<;?;<:;:98:<:9998786wìù¢öbZ@=F7;A?IZjmqruxwz{y|||}~ÄÄÅÄÉÉÑÑáäãéñ∫π∑ª¿øºª∑∫π∂∂µµ¥µ¥≥≤≤±±≤±±±∞Ø≠¨´¨´´´™™™©®®ß¶¶¶¶•••§¢ü†     "!""!###$$$&u|}|ywtqpnmlkllllmonopqqqrrrrrpoljc[UHACA@@Evtvtqp`1-./1125676689998888KG9999:::<9:9;:;:;::<:=?=9;::9799:8777878:µ∑∑π∫ºº∫UKC<8:EYhostrwwwwxyyxyw{|}ÅÅÅÇÜáäçñ∏∂µ∏æΩ∫π∏∑µµ¥µµ¥≥≥≥≤∞Ø±ØØØÆÆ≠™™™©®©©®¶¶••§£¢££¢§¢£°üüö   !!!!"#$$%'*vÄ}zxuqpnmlklllmnmnopompppqnollkhbZSLH2A@=C†óìçãáÖ/../011345678989799IEGYGPSM<9>AAKPSG@;D9?;A8;::99979;878767668≥Æ≤¥ª∂∑∏ºnH@@MGclppqtstqstuvvvvxxz}|~~ÅÉÖÖãµ∂µ≥¥ª∏∂¥µ¥≥≥¥≤¥≥≤≤≤±±ØØ∞ØØ≠´´™™©©©®ßß§¶•§£¢¢°§££õïñïïï!"!#"&(*)("&'(/;T`vàñùüùûíàÑ|xvrqmmmlmlmlnmnnmnnooononkjif_YQLHC@>;Aîïóïòòó-.../0012446897898??;:BA:;CH9AM<<:7:;>=;>9;::9999:7<;<<;<<;:89d_debfea`\^IHKTkoqnorrrpppopnpqsuuxvxz|Ñó¥¥ÆØ≥∏∏∂¥≥≥≤≥≥≥≤≥∞∞∞≤∞ÆØØ∞∞≠≠´´™™®®ß™®®ß•§•§§õëêìïñïóïï&'(*)&'# %,5;QiwäíóîêèãçéêêêíííìîñïîïìîîîììïïíçâÖÉ}yxusrrqqppoooopononnoonllig`ZTMJGCA?GzuqeZL/-././0033357777888897989=<9;;8988888898:8888899999;===<<=>>>BãéçäÇxl\XUQQM`q}rlmoppommbklihilnoqssuvx{~ìïñïó†´¨Æ∞∞∞±∞∞∞∞∞±Ø∞Æ≠¨ÆØ¨¨¨´´´©©ßß®ßß¶ß¶ßûëàåèííîïîëãÜÉàâåééèëëëëíììîìîîîîììíëìíëíëëèééçåääâàÜáàââàäÜÖÑÅ~~}}{yxxwvttsrrqqqopnqonmlkfaZTMIGC>;>USMIGEE@94.-.//0245776887788698798898877767787676766566689:9984-H[MgíëëêêèëèåääÄvlbWRMrmldiihYahcehddhjjmlnpstäêíìëèíòóóòù£ß™´≠Æ≠≠≠¨≠≠Æ≠Ø≠≠¨™´™ßß®ßß¶¶¶®ìÖÜäåéèèêéâÇwofèèêëëííìîîïîñóñññïïîìííêèèéçååããääâäãâääãååééôüúîgHAR]jfjiijgggeddedcbccddaa]XPFA;>@DHHHGMNMMKJHB>;40049=B6:9=788776776677677777557665866666676977C?%,06>DIR`väéëëêêéèèççàáá~zk^]g^^_]Uaaabccbdefhhklnimr}Éäéîöôññîóùß©´ØÆØÆØ≠≠Æ™Ø∞≠¨´¨™®™®®™©´èÖÜàããàáàáÉÄlcZTQêêëêëêëêêèééçççåååããäââàââáàâáââãååãçãçéççèèëõ¢£¢¢††üüüûüùùöõîîëçéàáÖÜÅÅ}~||{yvsqpnkjihikmnljihbbbbdcdfeegb`PJKIGGEFFFGIJKKKKKONORTPRTSYZYZZZZZ\\]^^_`cfkrxÜìóóóñöóóóóóóóóïíàÅytndLMRVWXZ\^^_``a`db[fjlptx~àëììêëóù§©´Æ∞∞∞∞±Æ≠Ø≠Æ≠≠¨¨™™©™™´©éÖÜàâáÉÇÄyja[TOLHCçãããäâáâàááÜàááÜáààáâàâàààââââãäããåååçéééêèíìö†ü°†††ûüüûüüûüûüûü†††¢§•§¶§££°¢üùôñíéãâàáààããåääââÑÑÖÑÖáÖÜàààáâçááÖÖÑÖÜÖÖááââäããäâäâááÜÜàáÑÉÉÑÅÇÉÇÇÑÜÖÜàãçëìñöû°´¨≠¨≠¨¨´¨´´´©ß†õîà~pcXPHCA@HLOQSTVVTPLXbimnpsw|Öéíïôü£ß™Æ±±±≤±±ØØØØÆÆ∞Æ∞≠¨™™´¨ÆçÉÜââÖÉ|tg_TOJID?<;âááÜÖÜÖÑÖÖÖÖÑÖÖÑáÖáààâââäâããååçåããéçççééêëëêíöû†††°ü°°¢¢££•£•¶¶ß®©©©®©®ß®ß®ß¶££†ùöóñóóïîïïóôòóïïêêëêíìíìíëîìíììììììîìïìîììîìîììëíëëêëëííëèëìîîñïñóöööùû†¢•¶®ß´≤¥∂∑¥∂∂∂¥≥¨¶°ôêÑwk^ROKFB=:723438=ISX]beimotyÅäï†¶©´≠Ø≥µ∂¥µ¥¥≥±≤≤±±±≤∞∞ØÆ¨´™¨¨êÑÖââÖÇ|of^NC@A?=:76áÜÖÖÖÑÑÑÖÜÖÜÜÜÜááààààààâäãäåçååçéçééçéééêëêíñú†£§••§¶ßß®®®©©©®´™´´™¨¨≠¨≠´™®¶•££†ùúööôôööòöõõúõõôóîììíîîîóñòñóïîïïïïîïïïñïïñïïóñîïïïîïïñîññôõúûü†††°†û£§••®©©©¨≥¥¥∂∂≥∞´•üôóèÑxha\ZYWURPNPPOSUX[^abijpzÉéñû§™´≠≤∂µ¥¥≥≤¥¥µ¥≥≤¥¥≥¥±≤≥±±±±±ØÆ≠ÆÆ±îãäãàÑ|tj]LGA>>:9767éãäáààààáàáàáààâàäâââåääåçççéçêêëëíîñïïòôôõõü£ß©™±¨¨¨¨≠ØÆØÆÆÆ¨≠≠≠¨≠ÆØØ∞ØØ∞±ØÆ¨™¶¢ûúööôòòôôõõõõööòñññïîîïïññóòóòòòôõöõòòóñññóóôôöõöúùùùûü°¢¢£•§•¶¶ß©™¨¨∞≤±≤¥µ≥µªºπ∑≥≠®¢ûùûúúùúöôñíêçááÅÉÖÑàãçêïóúü•ß¨Ø≥∂∑∫∏∂µ¥¥∂∂µ¥∂¥≥¥µ¥µ¥≥≥≤≥≤≤≤≤≥±±±Æ≠≠ØØ∞ò´ìçâÉyvcMA>:;::87::ëëêèçççççççéçèééèèêèêìììîìîóñòôòôöõúúùûûû°¢¢•©¨≠ÆÆØ∞Ø∞ØØ∞≤≤≥≥≥¥≥≤∞±∞Æ±∞±±∞±±≤±∞Ø¨´©ß§£°†°¢£££¢°°ùûùùúü†ü††††ûûüüûüüü°††ü†ü†ü°¢¢£§£••§•ß®ß©©´´´ÆÆ≠Ø∞±≤¥≥∂µ∏∏∑π∫øøøø∫πµ≤ØÆ¨™©ß¶¶ß®ßßß•ß©™´ØØØ±≥¥∑ª∑∑∏π∫∫ªº∫∫∑∂µµ∑∂µµµ¥∂¥∂µ∏µ¥µ≥¥µ¥≥≥¥≥≥∞∞Æ≠´≠∞ï£ìèàÇzpYB98689:98::ïñïñïïïóñóóòñòóóòòòööúõúúõùùûùüü°°¢¢§§•¶¶ß©©´Æ±≥≥¥≥≥¥¥¥¥¥¥∂∑∂∑∑∏∑∏∏∑∂∂∂∂µµ≥µ¥µµ¥≥≤±∞ÆØØÆ≠≠≠≠´´´™™®®®®ß®©®´´´´™´™´¨´´´¨´®©™™´´´¨≠≠ÆÆ≠ÆØØØ∞±±≤≤≥≤≥∂¥∑∑∏∏∏∫ªººººø¡¬¬¡¡¿ø¿¿æ¿øΩΩΩææºª∫∫∏∫∑∑∏ππ∏∫∫∫πªºª∫ºΩΩæøΩºπ∑∑∂∏∏∑∑∂∑∑∂∑∑∂µ¥µ∂µµ≥∂¥µ≤¥±±ØØÆØ±ÜõÑåãÑzrL=53989:8:6*ôôôöõöõõúõõõúúûùûûü†°°ü¢°¢¢¢££•£••¶¶ß®®®©™´´Æ∞≥µµ∑∑∂∂µ∂µ∂∂∑∑∂∑∑∑∂π∏π∫∫ªªππ∫πππ∂∂∂¥±±∞Æ∞±Ø≤¥≥¥≥≤¨≠≤±∞∞∞±±±≤≥≥≥≥µ¥¥¥≥¥µ≥≥≤±≤≥≤≤¥¥≥¥µ∑∂∑∑∑∂∏∏∫πªπªªªºººº∫ªººΩΩæΩ¿¡¿¡¿¿¿øæ¿√¿¬¬¡¬¿¿¿¿øæΩæøæøæΩºªªªªºªΩΩΩæøæøæΩ∫∑∑∏∫∑∑¥∑∑∑∑∑∏∂∏∂∑∂∂∂µ¥µµ¥¥≤≤∞Ø∞∞∞´õÉzÜÉ{tP526899;+ úúùùùùûûûû††°†°£££££§§£••¶®®ß®®©™©©™´™´¨¨≠¨ÆØ≤µ∂∏∏∑∑∑∂∂∑∏∑π∫º∂∂∑µ∏π∫∫ªª∫ªªºººººππ∂∑∂∑∂∑µ∂∂∂∑∑∂∂≤≤µµµµ∂µµµ∑∏∏∏∫ππ∫∫ª∫ªππ∑∑∑µ∂∂π∏∏∏πππ∏π∫∫∫ªªªææø¡¡¬¡¬¿¿¿¿ø¡¡¡¡√≈≈√√¿¿øø¿øøΩΩºæø¿ø¿¿¿ø¿¿Ωøæ¿¿ø¿øΩ¿¿øøø¿øøøææ∫∏∏∏∏∏∑∏∑∂π∏∑∑∑∏∏∑∂∑∑∂µ∑µµµ¥≥≤±±∞±≤úùÅ~Ç|{Z25794#ûùùùûûüü°°¢¢¢££§••¶¶ßßß©©™©™™´´´¨´´´¨¨¨≠¨¨≠Ø∞≥µ∂∑∑∂∑∂µ∏∂∑∏∑π∏∏∏ππªªºΩΩΩæπºΩøΩΩΩΩºª∫ππ∏∂∑∑∏ª∫∫ππ∫∑∑∂µµµ∂∂∏∏π∫ªªªªºΩªΩæªª∫π∫ª∫πª∫ª∫ºª∫∫ºªªººæø¡¬¬√√¬ƒ≈ƒ¬¬¬¬¡√¬ƒ∆≈≈¬√¿¿¿¡¿¿øæΩæ¿¡¡¡√√¡¡¬¿¬√¬¬¡¿¡¡¡¡¡¿¿¿¬¿¡¡øøΩ∫∏∫ππ∏π∏π∏∏∏∏π∏∏∑∑π∂∑∑∏∑µµ≥≥≥≤∞Ø∞≤±ôûÖ}zv86/ûüüü¢°°°¢¢¢£§§§¶¶¶®¶®®®©™™™™´´¨¨´´¨¨¨¨≠≠ÆØÆØ±≥µ∂∑∏π∑∏∏∏∑∑ππ∫∫ªººææΩΩøæøøøæøøææææººªπ∫∫π∏π∏π∫π∏∏π∂∏∑∂∂∏∏∏∫π∫ΩΩΩΩΩæΩæøææΩªªªª∫∫ºªºººººæºΩºææ¿ø¿¡¬¬¬√√√¬¡¿¬¡¡¡√¬√ƒ√ƒ¬¬¬¡¿¿¿¿¿øø¡¬√ƒƒ√ƒ∆∆√≈ƒ∆≈ƒƒƒ√√¬√¡√√¬¡¡¡ææΩ∫ªª∫∫∫π∏∏∫∏ππ∫ππ∏ππ∏∏∑∑∑∂∂µ¥≥≥≥±≤≥±µûüâ|{yb$†üüû††°¢¢£§§•¶•¶¶•¶ßß©©™©™™´´´´´´´´¨´≠≠≠≠Æ∞∞≤µµ∂∑∑∏∑∂∂∑∏∏πππººººΩºΩΩæøæøøæøøæææΩΩªªªππ∫∏ππ∫∫ª∫π∫π∏∏∏∏π∏∫πºΩæææøæ¿øΩæææΩΩΩæΩºººΩΩΩΩªºΩΩæø¡¬¬¬¡¬¬¬¬ƒ√√¡¬ø¡¬¡¡¬¬√√ƒ≈¬√¬¡¬¡¿¿øæ¡¬≈≈∆∆««∆≈∆«∆∆∆∆∆≈≈ƒƒƒ√√√¡√¬¡¿¡Ωºªªºªªªπ∫∫π∫π∫ªª∫π∏ª∑π∏∫∏∂∂∂∂¥±≥¥≥≥≥∞£•ëwysU°†°°°¢°££¢¶§•••¶ß¶®©©™™™™´´¨´´¨¨¨≠ØÆØ∞Ø∞Ø∞±±≤¥∂∑∏ª∂∑∑∑∑∑∏ππ∫ªºªºΩΩºææøææøæøøææææºªºª∫ππ∫ª∫ª∫∫ºº∫ª∫π∫ππππªºæøø¿ø¿øø¿æøæΩººººººΩΩæΩæºΩææø¿¿¡¡¡√√√√√ƒƒƒ¬¬¡¬¡¬¡√ƒ≈≈≈…≈≈≈≈¬√ƒ¬¬¬¬≈∆»…  ………À  »»…«»≈≈≈ƒƒƒ¬√¡¬¡¿¿ººΩª∫∫∫∫∫π∫∫ªº∫ªº∫π∫∫∫ªªππ∫∏∏∂∑µ¥≤≤≤≥≤≥ß†òyspW!††°°£¢£§£§§••¶¶¶®®©©©™™´©´´≠≠ØÆÆÆØØØØ∞≠∞∞∞±≥≥¥∂∑∏π∂µ∂∑∑∏ªπ∫ª∫ªººΩºæøΩøøøøø¿¿øøææøΩΩæΩºªªπ∫∫∫ªª∫ªªªππªπªººΩæø¿¡¿ø¿¿øø¿øøæ¿ºΩΩºΩæΩΩø¿¿øøø¿¡¬√ƒƒƒ≈≈≈∆∆≈ƒ√√√¬√√ƒƒƒ∆«»«∆∆∆≈ƒ≈√ƒ≈≈∆»…ÀÃÀÀÃÀ   À …»««∆∆≈≈ƒ√ƒ¡¬¿¿øæΩººº∫ºªººøΩΩΩΩæºΩººººªª∫∫∏∑∑µ∂¥¥µ¥≤±≥≤¥´°ùÖrmT$¢°¢££¢££§•••¶ßß®©©™™™´´´™≠¨¨≠¨≠≠≠ÆÆÆÆÆ∞±≤±≤≥¥∂∑∏ππ∏∏π∏∏∏∫ªªºªººΩΩºøæøø¿ø¿¿¡¿¿¬¿¡¿¿ΩΩΩºΩºΩΩªººººΩººº∫ªªªººΩæ¿¿¿¡¡¿¡¡¡¡¬¡¿øææøæΩøøø¿¿¿ø¿¿¡¬√√√∆≈≈√∆«∆≈∆ƒ¬√¬¬√ƒƒ≈ƒ≈≈≈ƒ≈√√√¬¬√ƒƒ……ÃÃÃÕÕŒÕÕŒÃÃÃÀÃ ………»«∆∆√√¡¬¿¿¡øæ¿øæøæøæø¿¡øøæΩªª∫∫∫π∫∫π∏∏∂∂µ¥¥≥¥±±≥≤¥∂≥•™õym[+¢¢¢¢££§§§§•¶ßß®®©©ß™´´´´´¨≠¨¨≠ÆÆÆÆÆ∞ØØ∞±±≤≤≥¥∂∏∏π∫ππ∏∏π∫πª∫ºººΩºΩΩΩøøø¿¿¿¿¡¡øø¡¡øøæΩºººΩºΩΩΩΩΩºΩºΩº∫ºΩΩææ¿¿¡¬¡¬¡¬√¬¬¡¬¬¡øøøøø¿¿øø¿¿ø¿¡¡¡¬√≈∆∆∆∆«»…«∆∆ƒƒƒƒ√√√≈≈≈≈≈ƒ≈≈√≈≈ƒ√≈∆∆… ÀÀŒŒœŒœœŒÕÕÕÕÕÀ  ……«»∆∆≈ƒƒ√√¬¡¿¬¿¡ø¿øøø¡¿¿øøΩªªΩ∫º∫ªªππ∏∑∑∑µµµµ¥¥¥≤≥µ¥µ™¢°ãmhA!¢¢¢£££•••••ß¶ß©©©©©©´´´´´¨≠ÆÆ≠≠ÆÆØØØ∞∞Æ±∞≤≤≥≥µ∑∏π∫∏ππ∏ª∫∫ªªªªªººΩææøø¿¡¡¿¬¿¬¡¡¡¿øøøøææΩΩΩΩºΩæΩΩºΩºΩººΩΩææ¿¡¬¬¬¬¬ƒƒƒ√¬¬¬¡¿¡ø¿¡¡ø¿¡¡¿¡¬¬¬√√≈≈«∆«∆»»…»««∆≈≈∆ƒƒ∆««»««∆≈ƒ≈ƒƒƒƒ≈ƒ∆…ÀÃÕœŒÕœœ–ŒŒœŒÕÃÀÀ   …«««∆ƒƒ√¬¡¬¿¡¿¡ø¿¿æøø¿øææΩΩΩæºªΩªªª∫∏∏π∏∂∂∂µµ∂¥¥¥¥µ∂∂±¶üõ}gQ-¢£££§§•§§•¶¶ß®®©©©©™™¨´¨¨≠≠ÆÆ≠≠ÆØØØØ±±∞∞≤≤±≥¥µ∑πππªππªπππ∫ªºªªΩΩºΩøø¿¿¡¿¿¡¬¡¡¿¿¿¿¿ø¿øøæΩ¿ΩΩΩæΩΩΩæΩººººææøø¬¬¬¬√ƒ√ƒ√¬ƒ√√¬¬¡¡¡¡¿¡¡¬¡¬¬¬√¬¬√≈∆«««»»………»»∆≈ƒ√«∆»«»«»«∆∆∆≈∆ƒ√ƒƒ∆»… ÃÕŒŒŒœ––œœœœÕÃÃÀ … …»»»«∆∆ƒ√√¡¿¡ø¿øøøøøøøøøøæææΩΩººªºªªπ∏∫π∑π∑∂∑µµ¥¥µµ¥µ¥¥¨£öãr[?$§£§£§••••••¶ßß©®®©™´´¨¨≠ÆÆÆÆÆÆØÆ∞∞∞±∞≤±≤≥≥¥µµ∑∏πππ∫∫∏∫π∫π∫ªª∫ººæºΩøøæøø¿¿¡¡¬¿¡¡¿¿¿øøæææºΩΩæææææææøæΩæΩææø¿¡¬ƒ√√√≈ƒƒƒ√√¬√¬√√¡¡¡¬¡¡¡¬¡¬√¬≈∆«∆»»………»…… …∆∆∆∆∆∆«»»……»»«««∆≈≈ƒ≈«» ÀÃÃœœœœ–œœŒœœœÕÀÀÀ   …»»«∆∆ƒƒ¬¡¿¡¡¿¿øøø¿ø¿æø¿¿ææøøººøæºªª∫ππ∫∫∑∑∂µµ∂∂∂∂µ¥¥¥∂±®üôÜiM££§¶••¶•¶¶ßß®®ßß™™™´´´¨¨≠ÆÆÆØÆØØØ∞∞±≤≥≤≥≤≥¥¥∂∑∑πππªªπ∫π∫∫π∫ªºººººæææøø¿ø¡¡¡¡¡¬¡¿¿¿øæææΩΩæºæææøøøæøææΩºøøø¡¿¬ƒƒ√√ƒƒ√≈≈√ƒ¬¬¬¬¬¬¬¬¡¬√√√√√≈≈∆«««»………»…… …»«∆∆≈≈∆«»  »»»»«∆∆∆«∆«»… ÀŒŒŒœœœœœœœŒÕÃÕÀ À   »««≈≈ƒ√¬¬¬¿¡¡¿¿¿¡¡¡¬¡¡¡¡¡¿¿øøøøøæΩæΩ∫ª∫∏∑∑∑∑∏∏∏∑µ∂∑¥¥µµ∂∞¶ûîÄ£££••¶¶¶ßß®®©©©™™´´´´´´Æ≠ÆÆÆØÆ∞∞±±≤≤≤≥≥≥≥¥¥µ∂∑∏π∫∫ª∫∫∫ª∫ª∫ªΩΩΩΩæææøøøø¡¿¿¡¬¡¡¡¿¡¡øø¿øææøæøøæøø¿ææøøøøø¿¡¿¡¬√ƒ≈≈√≈ƒ≈≈≈ƒ√√√√ƒ√ƒ√¬√√≈√ƒƒƒ≈≈ƒ≈»»»…      ……»»«««««»«…»»«∆«»»…»»«…ÀÃŒœœ–œœœœœ–ŒŒÕÃÃÀÀ   …»««∆≈ƒƒ¬¡¬¿øæ¿¿¡¡¬¬¡¡¬¬¬¡¿¿¡¿¡øææΩææªª∫π∏π∏∏∑∑∑∂∂∂µµ¥µµµµ≤¨•õ§£§§••¶®ß®ß®©™©©´´´´¨¨≠Æ≠ØÆØ∞∞∞∞∞≤≤≤≤¥≥≤≥¥≥¥∂∑∫π∫∫ª∫ªπ∫ª∫∫ºΩºΩææΩæøΩ¿ø¿¡¬¬¬¡¡¬¬¡¡¡¿¿¿øøøøøøøøæ¿øΩø¿øø¿¿¿¡¬¬ƒ≈≈ƒ≈≈ƒ≈∆≈≈≈≈√√√ƒ√ƒƒ≈≈∆√ƒ≈≈∆∆««…«… … À     »…»«…«… …» …»«…»»……»…  ÕÕœœœ–œ–œ–œŒœÕÕÃÃ  À ……»«∆∆ƒ√√¡¡¡¿¿¿¿øø¿¿¡¡¡¡¬¡¿¿¿¿¿øæøΩΩºªªª∫∫∫ππ∑π∏∂µ∑∂≥¥∂≥¥¥µ∂≤´¢¢¢£•§¶ßßß®®™™™´´´´¨≠≠≠ÆÆØØØ±∞∞±±≤≤≤≥±≤≥¥¥¥µ∑∏π∫∫ºª∫∫∏π∫ºªΩΩºªΩæΩæøøø¿¡¡¡¡¡¬¬¬¡¬ø¬¡ø¿ø¿øøøøøøø¿¿øøøæ¿¿¿¡¡¬ƒƒ≈≈∆∆≈∆≈∆≈ƒƒƒ√ƒ√ƒ√≈≈ƒ≈ƒƒƒ≈≈∆∆∆«»………    À   …  »… ÀÀ À  ÀÀ …… » ÀÀÃÕŒŒ–––––œœœœœœÕÕÀ ÀÀ ……»»≈∆≈ƒ√√¬¡¿øø¿øøøø¿øø¿¿¿øøøæøæΩøΩºΩ∫ªªª∫ππ∫∑∑∏∏∏∑∑∂∂∂µ≥¥∑∂µ∂¢°°¢¢£§•ß¶¶®®®®©™´™´¨Æ¨¨ØØØÆØ∞∞±≤≤≤≤≤±≥≤≥≥µµ∂∑∏π∫∫ºº∫∫∫ªªªºΩΩΩΩΩøæø¿ø¿¿¡¡¬ø¬¬¬¬¬¬¡¡¬øøæ¿¿øøøø¡Ω¡¿¿¿¿¿¿¿¡¬√√ƒ≈∆∆∆≈∆∆∆∆≈¬ƒƒƒƒ√√√ƒƒ√≈≈≈ƒ≈«««»… »   ÀÀÀÃ   ………»   ÀÀ      …  ÀÀÀÃÕŒœœœŒœŒœœœŒœÕÃÃ     »«««≈≈ƒ¬¬¬¡¿¿øæææøø¿øæøøø¿øæΩøæææøΩªºªªºªππ∏∑π∂π∏∏∏∏∑∏∑∑∂∂µµ¥¥†°°°¢¢¢££••¶¶¶ßß©®©™™´´¨¨≠≠≠ÆØ∞∞≤±±≤±≥≤≥¥¥µ∂∂∏πππ∫∫ªª∫∫∫ªªººººΩΩææøøø¿¿¡¡¡¬√¬¬¬¡¬¡¿¡¡¿¡ø¿ø¿¡¿ø¿¿¡¿¡¡¿¡¿¡¬√√ƒ≈≈∆∆∆∆∆≈∆≈≈≈≈≈∆≈ƒƒƒƒƒ≈≈ƒ∆««»»…      ÀÀÀÀÀ À……»  À ÀÃ   ………    ÀÀ ÃÃÕŒÕŒŒÕŒŒÕÕÕÃ À  …»…»∆«∆≈ƒ√√¬¡¿¿ø¿øææøæ¿æøøæææøΩæΩææºΩæΩºªªªπ∫ππ∏∏∏∏∑∑∏∏∑∑∏∑∂∑¥≥≥≥†††††°£¢££•¶•¶¶ß®ß®©™´´¨¨´¨≠≠ÆÆØØØ∞±±≤≤≤≥¥µ¥∂∑∏∑∏∏∫∫∫∫∫π∫ªªºΩ∫ºæºææø¿¿¿¡¡¡¿¡¬¬¡¬¬¡¿¡¿¿¡¿¿¿¿¿¡¿¿¡¿¡¡¡ø¡¡¡¬¬√√ƒ≈∆∆∆≈∆«∆∆≈≈ƒ∆∆≈ƒƒƒƒƒ∆∆∆«««»«»»……ÀÀÀÀÀÀ À  …………À      …»»»»…»… À ÀÃÀÕÕÕÕŒÕÕÕÃÀÃ  À………»«»∆∆≈√¡¿¡¿¿ø¡¡øøøΩææææææøæººΩææøΩæΩΩΩªªªπ∏πªπ∏π∑∑∑∑∂µ∑µµµµ¥≤≥±ûûûüü°†¢££§§§••¶ßß®®™™©™´¨´´¨≠≠≠ÆÆØØØ∞±∞±≤¥¥¥µµ∂∑∏∏πππππ∫∫∫ªªºªΩΩøææøø¿¡¡¿¿¡¡¡¡¡¬¡¿¡¿æø¿ø¿¿¡¿¿¡¿¿¿¿¿¡¡¬¡√¬√ƒ≈≈∆∆≈≈∆∆∆∆∆≈ƒ∆∆≈≈ƒ≈∆∆∆«««∆«»………»   À  À À   ……… ÀÀ   …»»»«»»»……  …  ÀÃÃÃÃÀÃÃÀÀÃ … »…»»»»«∆≈√¬¬¡¡¿¿¿øø¿øøøæøøæΩøΩΩΩΩΩææΩΩΩº∫ª∫∫π∫∑π∑∑∏∑∂∑∑∑µ∑∑µ¥¥≥≥≥±ùüùü†††°¢¢¢£§§§¶¶¶¶®®©®ß™™™´™´¨´¨≠ÆØÆØØ∞∞±±≤¥¥µµ∂∑∏∑∏π∏π∏∫π∫∫ªºººΩΩæΩøøøø¿¿¡¿¿¡¡¡¿¿øø¿ø¿øø¿¿¿¡øø¿¿ø¿¿¡¡¬¿ƒƒƒƒƒ≈≈≈≈≈∆∆≈∆∆ƒ≈∆≈ƒ≈≈∆∆««∆∆«»»…… À À  … … ………»…»»À……» …«»»««»«»««»»»»…  ÀÃÀÀÀÃÃÀ    … ………««∆≈√√√¡¡¡¡¡¡¿ø¿¿øøø¿øøøøæøøøøΩºΩº∫ª∫ª∫∫∫∫π∏ππ∏∏∑∑∑∑∏∂∑¥≥¥¥≤±úùùüûü†°¢¢¢££££§••¶ßß®ß®®©©™™´´´´¨´¨≠≠ÆÆÆØ∞∞≤≤¥µµ∂∂∑∂∂∑∑∏∏∏∫∫∫∫ªªººΩææææøø¿¿¿øø¿ø¿ø¿æΩæøøæøøøø¿¿øæ¿æ¿¿¿¿¡¡¬√√ƒƒ≈∆≈≈≈∆≈≈≈ƒ∆∆≈≈≈≈≈≈≈≈∆≈«««»»…   ……  …… ……»»»»»»»…»»«««»««»»∆»»»«… …  ÀÀ      … ………»««∆≈≈ƒƒ¬¬¡¡¡¡¡¿¿øø¿øøøøææøæΩææøæΩºΩΩºΩºª∫∫ª∫ª∫∫πππ∂∫∏∑∏∑∂µµ¥≥±±úúùùûûû††°°£¢£££§§§•¶••ßßßß®©©®´´™´¨≠´¨≠ÆØØ∞∞±≥≥≥¥µ∂∂∂∂∂∑∑∑∏∏ππ∫∫ªºªºΩΩΩæøææøøøøøææΩΩæΩΩºææΩæΩøøøæææ¿øø¡¿¡¬¬√√√ƒƒ≈ƒƒƒƒƒ√√ƒƒƒƒƒ√ƒƒƒ≈≈≈≈∆∆««»»…………… … ……«»»»««««»»«∆»»»»«»»»»…………    À À    ……»…«∆∆∆≈ƒ√√√¬¬¡ø¿¿ø¿øøøææøøøæøΩΩæºΩºΩºª∫Ωººººº∫ªª∫∫ππ∫∫∑∑∏∏∑∑∑∂µµ¥≥≥≤õõùùùùû†ü†ü¢°°°°¢§§§••§•®ßßß®©™©©™¨´´´¨¨≠ÆÆÆ∞±±≤≥¥≥¥µµµµ∂µ∂∑∏∑∏πππ∫∫∫ªºªººΩΩΩæºΩºæΩΩΩººººΩººΩΩΩºΩΩΩæææøøøø¿¡¬¬√√√ƒƒƒ√√¡√√¬√√√√√ƒƒ√ƒ≈ƒ≈∆««∆«…«»……»…»…»«»«∆«∆∆«««««∆»…»»««««»………………… ………  …«»»∆∆∆ƒ∆≈ƒ√√¬¬¬¬¿¡¿øæææææΩææøæΩææææΩΩæøΩºΩΩººΩªªª∫π∫∫∫πªπ∏∂∑∑∑∑∑¥∑∂µ≥¥≥úõúúùúùùûûù°ü°¢°£¢§§§¶§•¶¶ß¶ß¶®©©®™™™´¨¨´≠≠≠ÆÆ∞∞≤±≤≥¥¥≥µµµµ∑∑∂∑∏πππππªºªªªªªΩºΩºΩºººªººΩΩºΩºººΩºΩºæææææ¡øø¿¿¡¬¡ø¬√¬¬√¬¬¬¬¬¬¬¬¬¬√ƒƒ≈∆≈≈∆∆«∆»«»«»…»««…»»∆«≈∆∆∆∆««∆»««»«∆∆≈∆∆««»»«…«»»»»»»«»«∆««∆≈ƒ√ƒƒ√√√¡¡¡¿¿¿¿øæΩææººøΩøæææΩΩæøæøΩæΩøΩªºª∫ª∫ª∏π∫∫π∏π∑∏π∑∑∑∑∂∂¥¥≥≤ööõõõúúùùüüûû†°†°¢¢££§•••••¶ßß¶ß®©®©©™™´´¨≠≠≠Æ∞∞±≤±≤¥≥¥¥¥µµµ∂∂∂∑∑∑∑∏∏ππ∫∫π∫∫ªªºª∫ªªªªªºªªªºªººΩΩΩºΩΩæΩøøææø¿¡¿¿¿¿¬¬¬¬¬¡¡¬¬¡¬√√ƒ≈ƒ≈ƒ∆∆≈∆∆««««««»««»»…«∆∆∆∆∆≈∆««∆»»«««∆«∆∆≈∆≈∆»««««»»»»««∆ƒ≈≈∆∆∆ƒƒƒ√√¬¡¬¡¡¿¿¡¿øøææææææææΩΩΩæææøæøæΩºººªªºªª∫ª∫∫ª∫ππ∏∏∏∫∫∏∑∑∑∑µ¥µ¥¥öööõúúõúúùûûûüü†°°¢£¢§££•§§§¶•¶¶®®®®©©©™™´´≠≠≠ÆØ±±≤≤±≤≥≥≥¥µµ¥¥µµ∂∂∂∑∑∑π∏π∏ππª∫∫∫π∫π∫∫∫∫ª∫∫ªªªºªΩººΩΩΩææøø¿æøø¿øøø¡¬¿¡¡¬¡¡¡¬√√ƒ√√ƒ≈≈≈≈≈∆∆≈∆«∆«««««««««∆∆≈∆∆«««∆∆∆««∆««∆∆∆«∆∆∆«∆∆∆∆»««∆∆∆≈ƒƒ≈≈√ƒ√¬¬√¬¬¡¬¡¡øø¿¿æøøææΩæΩºæΩΩΩΩæΩæΩΩΩºΩººªªºº∫ªª∫πª∫∏∫∏ππ∏∏∏∑µ∂∑∑µ∑µ¥òöôöööõõúúùùûùû†††°°°¢¢¢£§£§§•§¶¶¶¶®®©©™™´´´¨¨≠ÆÆ∞∞±≤≤≤≤≥≤¥≥≥≥¥µ∂µ∂∑∂∑∑∑∑∏π∫ππππππ∫π∏∏πππ∫∫ª∫ºªªªªªΩºººøΩææø¿ø¿øø¿¿¡¡¿ø¿¬¡¬√√√√√ƒƒƒƒ√ƒ≈≈≈≈«∆∆∆∆«»««»∆∆∆∆≈∆∆∆∆∆≈∆≈∆∆≈∆≈∆≈≈∆≈≈≈∆≈≈∆∆∆≈∆∆≈≈ƒ≈≈ƒ≈¬¬¡¡√¿¬¡¡¡¿¿¿¿øøøøøΩæøΩΩææºΩΩæææΩΩæΩΩΩºººªΩººΩºªªππªπ∫ª∫ππ∏∏∏∑∑∂∑µ¥óòóôôööõõõõùúùùüûüü†°†°¢¢£££££§••¶•ßßß®©™™©™´´≠¨ÆØÆØ∞∞∞∞±±≤≤≥¥≥¥µµµµµ∂∑∑∑∏π∏∏πππ∏∏∏ππ∏ππππ∫π∫∫∫ª∫ªºªªºººΩæΩøøøøøø¿¡¿¡¡¡¡¡¡¬¬¬ƒ¬¬¬√√√√√ƒ√∆ƒ≈∆∆∆∆«∆∆««∆∆∆≈∆∆≈∆≈≈ƒ≈≈ƒƒ≈ƒ≈ƒƒ≈ƒƒ≈∆≈≈≈√≈≈≈ƒ∆≈ƒ√≈≈≈ƒƒ√√¬¬¬¡¬¬¡¿¡¡¡ø¿øøæææΩøøøææΩΩΩæΩææææææΩººΩΩΩΩΩΩΩª∫∫ª∫ªπ∫π∏∏π∏∑∑∑∂∂µîîóññòôôöôöööõõùùùùüüüü†¢¢°¢¢££§§•••ßßßß©©©™™´¨¨≠≠ÆØÆØ∞∞∞±∞≤±≤≥¥≥¥µµµµ∂∂∑∑∏∏∑∑∑∏∂∑π∏∏∏∏π∏∏ππππ∫π∫∫∫∫ººΩΩæææΩΩæøø¿¿øø¡¡¿¡¡¡¡¡¡¡¡¡¬¬¬¬¡¬√ƒ√ƒƒƒ≈≈∆∆≈∆≈≈≈ƒ≈∆ƒ≈≈≈ƒƒ≈≈ƒ√ƒƒ¬ƒ√√≈ƒƒ≈√∆√ƒ√ƒ≈≈ƒ≈ƒ√√ƒƒƒ≈≈ƒƒ√√¡¡¡¡¬¡¡¡¡¡¿¡¿¿ææøææøæææøæøøΩæºΩæΩΩææøæææººΩºªªºªºª∫π∫ªππ∏∏∏∑µµììîïññóòôòôòöõõõúúùùùûûü†ü°°°°¢£§§••¶•¶®ß®©©™™´¨¨≠¨ÆØÆÆØ∞Ø∞±±±≤∞≥≥¥¥¥µ∂µµ∂∑∑∑∑∑∑∑∑∑∏∑∑∑∏∏∏∑∏∏∏∏ππ∫∫ªªªªªΩºΩΩøø¿øøøøø¬¡¡¡¿¿¿¿¡¡¡¡¡¬¡¡¡¬¬√√ƒ√√ƒ≈ƒ≈≈ƒƒƒ√ƒƒƒ√√√√√ƒ√ƒƒƒ√¬√√ƒ≈≈≈≈≈ƒ≈ƒƒƒ≈√ƒ√√ƒ√ƒƒ≈≈≈ƒƒ¬¬¡¬¡¡¬¿¡¿¡¿¡¿¡¡øøøæøæææøøøø¿¿ºøΩæøøæææææΩΩººªººΩªºª∫∫∫ªª∫π∏π∑∑µµìííìîîîïóóóóôôôööõõúõúùùûüü††°°°££§••••ß¶ßß©®´™´´≠≠Æ≠Æ≠ØØØØØØ∞Ø±±≤≥¥¥¥¥¥µµµµ∂∑∑∂∂∂∑∑∂∂∑∑∏∑∑∏∏∏ππ∏π∫∫ª∫∫ºªΩΩææøøøøæøø¿¿¿¿¿¡ø¿¿¡¿¿ø¡¡¡¬¡¡¬√¡¬√¬√√√¬¬¬√√√ƒƒ√√¬√¡¬√√¬√¬√√√ƒ≈≈ƒ≈≈ƒƒ√ƒ≈√√√√ƒƒ√ƒƒ√√√¬√¬¡¬¡¡¡¡¡¡¡¡¿¡¿¿¿¡¿¿øøøøæææøøæøøΩøøæøøææΩææΩΩΩºΩºººæªª∫ºªπ∫∏∑∏∏∑∑∂êëëììíîîñïïóñóòôôôööúöúùùùû†üü†°°¢£§£¶•¶¶ßßß®©™©´´¨≠¨≠≠≠ÆÆÆÆØÆÆØ∞≤±±≥≥¥¥¥¥¥¥µµ∂µ∂µ∂∂∂∂∑∂∂∑∂∑∑∏∏∏∏∑∏∏ª∫ªºªªºΩæΩæøææøøøø¿¿ø¡øø¿¿ø¿¿¿¡¡¡¡¡¡¿¡¬¡¬¡¬¬¡¡√√√¬¬√¬¡¬¬¬√¬ƒ√¬¬¬¬√√ƒ√ƒƒ≈≈≈ƒ≈ƒƒƒ√√ƒƒ√√ƒ√√¬¬¬√¬¡¡¡¡¡¡¡¡¡¿¿¿ø¡¡¡øøæøΩæøæ¿øΩææøøæøøø¿øæΩΩΩΩæºΩΩΩºΩºªªªª∫π∏∏∏∏∑∑∂ééëêëíìììîîïîïññóóñôòöõööúúùúû††°†°¢¢££§••¶ßß®®®©´¨´¨´´´¨¨≠Æ≠≠≠ÆÆÆ∞∞±±≤≤≥¥≥¥≥¥¥¥¥µµµµµ∂∂µ∂µ∂∑∑∑∏∑∑∏π∏∫∫∫πªªªΩºΩæΩæΩæøææøøøΩøøøæø¿¿¡¿¡¡¡¡¡¿¡¡¡¬¡¿¿¬¡√¡¡¬¿¿¡¿¡¬¬√√¡√¬√√ƒ¬√√ƒ√ƒƒƒ≈ƒƒ√ƒ≈ƒ√√ƒ√ƒ√√√¬√¬¡¡¬¬¡¡¿¿ø¿¿øø¡¡øøæææææΩæøæøæΩææøææøææΩææºººΩæææºΩºªªººª∫∏π∑∏∑∑∂∂ãççèèéëëíìììîîîîïñóòóôòôöööúúúüûü††¢°¢°§£§•§¶¶ß®®©´™´™´´¨´´´¨¨≠¨ÆÆÆ∞ØØ±±±≤≤≥≥≥≥≥¥¥¥¥µ¥µµ¥¥∂∂∂∂∑∂∑∑∏∏∏π∫∫π∫ªªººΩΩºΩΩºæΩæΩææææææøøø¿¿¡¡¡¿¿¿¡¿¿¿¿¡¿¬¡¡¿¿ø¿¿¿¿ø¡¡¬¬¬¡¡¡¡√¬¬¬√ƒƒƒ√√¬ƒ√¬√¬√ƒ¬√√√√√¬√¡¡¬¡¡¿¿¿ø¿¿øøøΩøøøæΩæΩΩΩææΩΩΩººΩΩæææææºæææΩΩºΩæææºΩººΩªª∫∫π∏∏π∏∑∂∂äåççéééèêêíëííìîîîïñóñóòòôôöõõúúûûüû††°°°£££•••¶ßß®©©©´™™™´™´¨¨¨¨≠≠ÆÆØ∞∞∞∞∞±≤≤≤≤≥≤¥≥¥¥¥¥¥¥µ¥µµ∂∂∂∂∑∑∏∏∏π∫π∫∫∫ª∫ªªººººΩΩΩΩΩæΩΩæøæøø¿¿¿¬¡¿¿¿¡¿¡¿¡¿¿¿¡¿æøø¿æ¿¿¿¡¬¡¡¡¡¡¬¡¬¬¬¬√¬¬¬√¬¬¡¡¬¬¬¬¬¡¬√√¡√¬¿¬¡ø¬¿¿¿øæøæΩæΩææΩΩºººΩæΩΩΩΩºΩªººªΩΩæΩºΩΩøæΩæºΩææΩººªºª∫∏∏ππππ∏∑∂∂äâãåååçéèéêêëëííìíìîïîñññòòôöööõúùùûùüûü°°°¢£§••¶¶ß®®®©©®©™©™™´´¨¨´¨≠≠ÆØØØØØ∞±≤±≤±≤≤≤≥≥¥¥¥¥≥¥¥µ¥¥µµ∂∑∑∏∏π∏π∫∫πª∫∫ªª∫∫ªª∫ªººººΩæΩææøææ¿¿¿¿¿¿øøø¿ø¿¿¿¿øææææ¿ø¿øø¿¿¿¡¡¿¡¿¡¡√¬¡¡¡¡¿¡¿¡¬¬¿¬¬¡√¬¡¬¡¡¿¿¿¿¿æøøæΩΩΩººΩΩΩΩºªºººªΩæºªºªªΩΩººΩΩºΩΩºΩæºΩΩΩΩæº∫ª∫∫∫∫π∏∑∏∏∏∏∑∂∂ÄÄÄÄÇ}ÄÅ~ÄÅ~ÄÄÄÄÄÅ~ÄÄÄÄÄÄÅ~ÄÄÄÄÄÄÄÄ~Ä~ÄÄ~ÄÅ~ÄÄÄÄÄÄ~Ä~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÅÄÄ~ÄÄÄÄÄÄÄ~Ä~ÄÄ~ÄÄÄÅ~ÄÄÄÄÅ~Å~Ä~ÄÄ~ÄÄÄÄ~Ä~Ä~ÄÄÄ~Å}Å}ÇÄ~Ä~ÅÄ~ÄÄÄÄÄ~Å~ÄÄ~Äx}Ç}Å~ÄÉ}ÄÄÄÄ~ÄÄÅ~ÄÄÄÄÄÄÄÄÄ~Ä~ÄÄÅ~Å}ÄÄÄÄÄ~ÄÄÅ}ÄÄÄÄÄÅ~ÄÄÅ~Ä~ÄÄÄ~ÄÄÄÄÄÄ~ÄÄÄÄÄÄÄÅ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄ~ÄÄÅ~ÄÄÄÄÄÄÄÅ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~Å~ÄÄÄÄÄÄÄÄ}Å~ÄÄÄÄÄÄÄÄÅ}Ç}{ÖzÇ}Å~É|ÄÅ~Å~Ä~Å}Ä~Ä~Å~Å}Ä~Å~Ä~ÄÄÅ}Ä~ÄÄÄÄÄ~ÄÄÄÅ}ÄÄÄÅ~ÄÄÄÄ~ÄÅ~ÄÄÄÄÄÄ~ÄÄÄÄÅ~ÄÄ~Ä~Ç~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÅ~ÄÄÄÅ~Ä~Ä~ÄÄÄÄÄÄÄÄÄÄÄÅ}Å~ÄÄÄ~ÄÄÄÄÄ~Å~ÄÄ}ÅÄÅÄÄÄÄ~Ç}É|Ç|ÄÅ~ÄÄÄÄwÅ~ÄÅ}Ç}ÄÅ~ÄÅ~ÄÄÄÅ}Å~ÄÄÅ~ÄÄÄÄÄÄÅ~Ä~Å}ÄÄ~Ä~ÄÄÄÄÄÄÄÄÄ~Ä~ÄÄ~Ä~ÄÅ~Å~ÄÄÄÄÄ~ÄÅ~ÄÄÄÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÄÄÅ~ÄÄÄÄÄÄÄÄÅ~ÄÄÄÄÄÅ~ÄÄÄÄÄÅ~Ä~Å~ÄÅ~ÄÄÄÄÄ~ÄÄ~ÄÄÄÇ}É}ÄÅ~Ä~ÄÄÄÄÄÄÄÄ~ÄzÄÖ{Ä~Ç}Ç}ÄÅ}ÄÄÄÅ~ÄÄÄ~Å~ÄÄÅ~ÄÄÄÄ~ÄÄÄÅ~ÄÄÄÄ~ÄÄÅ~Å}ÄÄÄ~Ä~ÄÄÄÄÄÄÄÄ~ÄÄÄÄ~ÄÅ~ÄÄÄÄÄÅ~ÄÄÄÄÄÄÄÄÄÅ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅ~ÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÉ|ÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~Ü{Å~Ç}Ç}ÄÄÄÄÅ~ÄÄÄ~Å~Å~Å}Ä~ÄÄÄ~ÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅ~Ä~ÄÄÄÄÄÄ~ÄÄÄ~ÄÄÅÄÄ~ÄÅ}ÄÄ~ÄÅ~ÄÄ~ÄÇ}ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~Ü|Ä~ÄÅ~ÄÅ~ÄÄ~Å~Ä~ÄÅ~ÄÇ}Ä~~~Å~ÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÄÄÄÄÅ~Ä~Ä~Ä~ÄÅ~ÄÄÄÄ~ÄÄÄÄÄ~ÄÄÄ~ÄÅ~ÄÄÄÄÄ~ÄÄÄÄÄÄ~ÄÄÄÄ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÄÄÅ}ÄÄÄÄÄÄÄÄÄÜzÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÜ{Å~Å~Å~ÄÄÅ~Å~ÄÅ~ÄÅ~Ç}ÄÅ}Å~Ç}ÄÄÄÅ~ÅÄÄÄÄ~ÄÄÄÄÅ~ÄÄÄÄÄÄÄÄÄÄÄÄ~Ç|ÄÄÄÄÄÄÄÄÄÄÅ~ÄÄÄ~ÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÅ~Ä~Ä~Ä~Å}ÄÄÄÄÄÄÑzÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄÄÜ{Å~Ä~Å~ÄÅ~ÄÄ~ÄÅ~ÄÅ~Å~Å~~~ÅÅ~ÄÄÄÄÄÄ~Ä~Ä~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÅÅ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅ~ÄÄ~ÄÄÄ~ÄÅ~ÄÄÅ~ÄÄÄÄÄÑzÅ~ÄÄÄÄ~ÄÄÄÄÄÄÄÄ~ÄÄÄÄÑ|Å}ÄÄ~ÄÄ~Å~ÄÄÄ~Å~ÄÄÅ~Ç}Å~ÄÄÄÄÄÄÄÄÄÄÅ~ÄÄÄÄÄÄÅ~Ä~ÄÄÄ~ÄÄÅ~Å~ÅÄÄÄÄÄÄÄÄÄ~ÄÄÄÄ~ÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅ~ÄÅ~ÄÄÅ~ÄÄÄÄÄÄ~ÄÄ~ÄÄÄÄÉ{ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÇ}Ñ{Ç}Å~Å|Ä~Å~ÄÅÄÄ~Å~Ä~Ä~ÅÄÅ~Å~~ÄÄÄÄÄÅ}ÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÄÇ}Ç}ÅyÉyÅ{É}Å|Ä{Å}ÅyÇ{ÅzÅ|ÇvÉ|ÇÑ|Ñ{ÄÄÄÄÄ~ÄÄÄÅ~ÄÄÄÄÅ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~Ä~ÄÄÄ~Ä~Ä~Ä~Ä~ÄÉ|ÄÄÄÄÄÄÅÄÄÄÄÅ~Ä}Ä~Ä~Ç|Ä~Å|Ä~Å}ÅÅ~Ä~ÄÅ}Å~ÄÄÄÇ}ÄÅ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅ~ÄÄÄÄÄÅ}}ÅÄÄ~ÄÄÄ~Å~Ä~Ä~Å{Å~Ä||Ä|Ä{ÄzÇzÅzÑvátáÄ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄÄÄÅ~ÄÄÄÄÄÇ|Ä~ÄÄÄÄÄÅ~Å~Å~ÄÄÄ~Å~Ç}Å|Ä~ÑÄÄÄ~Å~ÄÄÄÄ~ÄÄÅ~ÄÄ~Ä~Å}Å~ÄÄÄÅ~ÄÄÄÄÅ~ÄÄ~ÄÄÄÅ~Å~ÄÅ~ÄÄÅ~ÄÖ|ÄÄÄÄÄÄÄÄÄ~Ä~Ä~~~}}Ä~~}ÄyÅxÜsäqåÅ~ÄÄ~Ä~ÄÄÄÄÄÄ~Ä~ÄÄÄÄÄÄÄ~Å~ÄÄÄÄÄÄÄÄ}ÄÄÄ~~Å~ÄÄÄÄÅ~Å~Ä~Å}É|É|Ç|Å}Å}Å}Å~Ä~Ä}Ä~Ç|Å}Å~}~ÄÄ~Å~ÄÄÄÄ~Ç}ÄÄÄÄ~ÄÅ}Ä~Ä~ÄÄÄÅ~ÄÄ~Å~ÄÄÅ~Ä~Å~ÄÄÄÄÄÄÄÄÄÄÄÄ~Ñ}ÄÇ|ÄÄÄÄÄÄ~ÅÄ~~|~~}|Å|Å{ÉwÜuàÄ~Å~ÄÄ~ÄÄ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÅ~ÄÄ~ÄÄÄÄÄÄÅ~Å~Ç}Ä~Å~Ç}ÄÇ|É|Ç|Ç}Ç}É|Ç}Ç}Å}Å}Ä~Å}ÄÇ|Ä}Ç~~ÄÇ}ÄÅ~Ä~Ä~Å~Ä~ÄÄÅ~ÄÄÅ~ÄÄÄÄÄÄÄÄÄÅ~ÄÄÄ~ÄÄÄÄÄÅ~Å~ÄÄÜ}Å~ÄÄÄÅÄÄÄ~Ä~~}Ä~|ÄÄÄÑ~váÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄÅ~ÄÄÄÄÄÅ}Ç}Å~Ç}Ç|É|Å~Å~Ç}É|Ç|Ç}Ç|Ç|É|Å~Ä~Ç}Ç}Ä~Å~Ä~Ç}ÉÄÇ}ÄÄÅ~Ç}ÄÄÄÄÄÄ~ÄÄÄÅ~ÄÄÄÄÄÄÄÄ~ÄÄ~ÄÄÄÄÄÄÄ~Ä~ÄÉ}Ä~Å~ÄÄÄÄÄÄ~}~|~{ÄÄ}Å~ÄÄÄ|ÉÄÄÄ~Ä~ÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄÑ|É}Ç}É|Å~ÅÅ~Ç}Å}Å~Ñ{ÜzÖz{Ñ~ÄÅ}Å~É|Ç}Ä~Ä|Å~Å~Å}ÄÄÅ~ÄÅ~ÄÄ~Å~Å~ÄÄÄÄÄÅ~ÄÄÄ~ÄÄÅÄÄÅ~ÄÄ~ÄÅ~ÄÄÄ~Ä~ÄÄÑÄÅ~ÄÄÄÄ~~~}~|~|Å{|Ä|ÅÄÅ}}ÅÄÄÄÄÄÄÄÄÄvárås∏rπs∫tΩrπsΩt∫u∫vªsπq∏s∏vπwµt∂t≥u≤tØmìkírä~ÄÄÄÄÄÄÄÄÄÄÄÄÇ}Ñ{Ñ{É|É|~á{ÄÄÉ|Ñ{Ñ}Ñ{ÄÅ~Å|}Ç|Ç}É|Ç}É|Å}ÄÄÅÄÄÄÄÅÄÅ}Å}ÄÅ~Ä~Å~ÄÄÄÄ~Ä~ÄÄ~Ä~ÄÄÄÄÄÄÄÄÅ~ÄÄÅ~ÄÄÄÄÄÅ~Ç}ÄÄÄ~ÅÄÄ~Ä}|~~~}~Ä~Ä~ÄÄÄwâxãÅà}Ç`ót´u≤u≠ußu¶t®t¶oúlöpôqótñnìoênèmçnåmåmévèrísïrèoéuàÄÄÄÄÄÄÄÄÅ}érÜyÖzÇ}ÄÄÄ~Å~ÄÄÄÄÄÄÜ{}Ä}Ä~Ç}Å~É|Ä}Ä~Å~ÅÉ}ÄÄ~Ä~Ä~Å~Ç}Ä~Å}ÅÄÇ}ÄÄÄÄÄÄÅ~ÄÄÄÄ~Å~ÄÅ~ÄÄÄÄÄÄÅ~ÄÅÅÄÅ~ÄÄÄÄÄÄÄÄÄ~~~~~}~~}}Ä~ÄzÄÄÄs´a§bó~wzÄcóvßs£oånápàtÑtÑtánånärèuípçméoçzÄzÄqähëgêr™híwÇ}ziêÄÄÄÅ~ÄÄÄÅ}©]á{Ñ{É|Ñ{É|ÄÄÄÄÅ}ÄÄá{w~~~~ÄÅ~Ç|Ç|Å}ÄÄÄÄÄÇ|ÄÄ~Å~Ä~Ä~Å~Å}Å~Ä~ÄÄÄÄ~Ä~Ä~ÄÄÄÄÄ~ÄÄÄÄÅ~ÄÄÄ~Ä~Ä~ÄÉ{Ä~ÄÅ~ÇÄÄÄÄÄ~Ä~~}~}~}~|{{Ä|}ÅÄÄv©pêcó~{zÉeïtßv•séjêhí}}}xÜlêkêx£t§qålêlè~|~{qåkêjët´hësâ|zdë~ÄÄÄÄÄÄÄÅ~~ÄäÉuâzÉÄÅ}Ç}ÄÅ~Å~Ç}Ñ|Ñ|ÄÄÄÄxÅ}ÅÇ}É|Ç|Å}ÄÄÅ~Å~ÄÅ}Å}Ä}Ä~Å}Å~Å~ÅÄÄ~Å~ÄÅ~Ä~ÄÄ~ÄÄ~ÄÄÄ~Å~ÄÄÅ}ÄÄÅ~ÄÄÄ~ÄÅ~ÅÅ~ÄÄ~ÄÄÄÄ~Å~Ä~~}~|~}~{|{Äz{ÅÄÄÄÄÄyänégîÄÅzÜeñÇÇ~ÉÑpålêÄÄ|ÑÅ{Éjëxä~ÅÄÅ~Émè}}ÄÄÄÅÄÅmétû{Çnã|{hèÄ~ÄÄÄÄÄÄ~ÄÄÄÄÄÇ}Ç~Ç~Ñ{É|ÄÄÄÄÄÄÄÄÄÄÅ~ÄÅÄÅ}Ç}ÄÅ~Ç}Å~Å~Å~ÄÄÄÄÅ~ÄÅ~ÄÅ~Å}ÄÄÄÄÄÄ~Ä~ÄÄ~Ä~ÄÄÄÄÄÄÄ~Ä~ÄÄÄÄ~ÅÉ}ÄÄ~~Ö{}~|}|~}~}|~~ÅÄÄÅ~{Å~z{ÇÄÄ{ÑÄÄ~{ÉÄ}É~Å}zÑ~~~Ç~Å~}É~~Ä~Å}Ä~z~~{É~|ÄÄ~ÄÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄÄÄÄ~ÄÄÄÄÄÅ~ÅÄÄÅ~ÄÄ~ÄÄÅ}Ç|ÄÄ~Å~ÄÄÄ~Ä~Å~Å~Ç}Å~ÄÄÄÄ~ÄÄÄÅ~Ä~Ç}ÄÄÄ~ÄÄÄÄÄÄÄÄÄÄÅ}Ä~Ä}Ä}~Ç~}|}Ä}ÅÄÄÄ|ÇzÉ}ÉyÜÇÉ{óÄÑ~Ç|É{ÇyÑ~É|É}É~É}ï{Ç}Ç}Ç~ÇxÇxÇ~É|Ö~ÑtÜ}É{Ö|ÇyÉ}ÖÄÄÄÄ~ÄÄÄÄÑ{Ü{Ñ|à|É}ÄÄÄÄÄ}Å|ÉÄÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÅ~ÅÄÇ}Å~ÄÄ~Å~ÄÄ~Ç~ÄÅ~Å~Å}Å~Å~ÄÅ}Å~Å~Å~ÄÄ~Å~Å~Ä~ÄÄ~ÄÄÅ~ÄÄÄ~ÄÉ~~Ä}Ä}~Ä|}~|ÄÑ}|Å}Å~ÅÄÄÄ}âzë|ó|ñ|ôöuásÜqÖpégïhíiìgìhïxÜhîfìiìhíiígìqápÜqÜtïn£u¨qìt´x®ÄÄÄÄÄÅ~~Ä|ÅÄ~~ÇwÇxÉvÖsërÄÄÄÄÄÄmösãnèrãwÜräáÅ~Ä~ÄÄÄ~ÄÄÄ~ÄÄÅ~Ä~Ç}ÄÅ}Ä~ÄÄÇ}ÄÅ}Ç~Ç}Ä~Å~Å~ÄÅ}Å}ÄÄÄ~ÄÄ~Ä~ÄÄÅ~ÄÄÅ~ÄÄÅ~~Ä|~|~~~}{~}~~ÄÄ|Ç}ÅÄÄÄzÖ}ïzñ|ó{ô{òsátáuÜtàgìiífîjìfîxÜgîiïgîiìeîlêoÑqÜnámâj†p´rîp™qüÄÄÄ|ÄÄuÉMê\ávÅ}~ÉuÉuÑuàqéuÄÄÄÄÅ~ÄyÖíwìvìtîtÅÅÄ~Ç}ÄÄÄÄÄÄÇ}Å}Å~Å~Å~ÄÄ~Å~ÄÅ~Å~Å~Å~ÄÅ~Å}Å~Å~Ä~Ä~Å~Å~Å~Å~Å}Ä}Å~ÄÅ}ÄÄ~ÄÄ~ÄÄÄÄ~~~ÄÄ~}}~|Ä}ÅÄÄÄÄvá{í|ï~ï|ó~îuàsÜrárÜlëiíiîjíiïzÑgîfîiìgìkëqÜqánàpÜhàn¶n§tïs®bîÄ~ÄÄ~ÄSêfÖvÇQãkâ}ÑuÑuÜrâoçvÄ~ÄròtìwéuésöÖÄÄÄ~Å~ÄÄ~Å}ÄìxÄ~Å~ÄÄÄ~Å}ÄÅ~Ä~Å~Å}É{Å~ÄÅ~Å~ÄÄÄÄ~Å}Å}ÄÇ}Å}Å}Ä~Å~Ä}Å~Å~Å}Ç}Å~Ä~Ä}Å}É~ÄÄÄÄÄÄÄÄÄÄÄÄÄ|}~~~Ä~Å~ÄÄÄÄÄÄÄvÖ}ì|î|ï~òsåtásàrárÖsámîkösçkîyÖhîfîiíiìlérÜoÜnánágásßqßrñp™gâ{Å{ÅxÖrÖJèjávÑtÖNétÇ~ÖsÜqáqäoÄ~~Ä~Åwúv£t£yówß{Å{ÑÄÅÄÄÄÄ~Å}íwìxÄÄÄÄÄ~Å~Å~Å~ÄÇ}ÑzÑ|Ç}Å~ÄÄÄÅ}Ç}Ä~Ä~Å}Å}Å}Å|}Å}}}Ä|}}Ä~}}Ä}Ä~}ÄÄÄÄÄ~ÄÄÄ~ÄÄ}~~Ä}ÅÄ}Å~ÄÄÄwá|ç{ëyìyîpàrásÜráqáráqõt•rûsìzÑiîgîgìiìpÜoáqáoànàhàyzxÉsôo£càuÉtÜ:íHèuÖxÇtÑxÜWètñtótìtïrëqêzÑ|Å~ÅÜ{èyì|äxãy~Ä|ÉÄ~ÅÅ~É~Ç~àzãxÅ~ÄÄÄÅ}É|Ç}Å~Ç~}~É|Ç}Ñ{|É|Ç}ÄÄ~ÄÉ}Å~Å}Å|~~|Ä}Ä}Ä~Ä{ÄzÄ{Ä{}|~~Ä~Ç~ÄÄÄ~Å~ÄÄÄ~ÅÄ~~~~Ä}~~~Ä~Å|Ç{É}ÅÄÄÄ{Özà{ç|íípásàqÖtÜrÜrçqëråtüv•yÖiîhïgïoÜpápÜoÜnÜoáuÑrÇ{}tôk°dâLè1î@í?íJëJåYçDè|Åuówötó|àzÑxöwá~ÄÄÄÜzëxèsçvétÇ~|ÉÅ~ÄÄÅ~Å~ÄÄ~Ä~ÄÄÄÄÅ~Ç|Å~Å}Ä~ÄÄÅ}Ñ|É|Ñ{Ñ{ÄÄ~Å}Å}Å~Å}Ç|Ç{}~}Ä|Ä|~|{Å|Äzz~|}{~|}|}}ÄÑ}ÄÄÄ~ÄÄÄ~}Ä~}~~~Ä~Å~~}Å|Ç|Å|Ç|ÅÄÄÄuá{ÉwåzÄvëwçuáqÖsàrárÜqÜqÖsëv®x~y~nélîrïsùpáqámálàeàeàz}utàfÜuÑhà}ÅiárÜhäZå{ÉÄÖuóxì{Öwãtòuñfî}ÅÄâ{êxãyãvíwÄ~}ÅÇ~ÄÄÅ~Å~Å~ÄÄ~Ä~ÄÄÄ~Å~Ç}Å~Ç|Ñ|Ç~y}Å|ÑzÖzÇ|Å~Å~Å~Å~Ä|Ä}Ä}Ä{|~{}z|{}x}z}y~yy~z}|zy~y~|Ä~ÄÄÄ~ÄÄÄ~Ä}Ä~~Ä{|}|}~|Å|Ç|Ç}Å|ÇÄÄÅ~wÖzåxçzãvâyêtàuÑsÜrÜtÖqÖqäu¶v¶t¢rûußrópàt°nïpàrámàfákÜy|x|oÜjÑmÖoÑnàrÖqácâcá|Éyë{Ñuîyëtósòvôaò|Å~Ää|èyåwçpçwÅ~~ÄÄ~Ä~Ç~É}ÄÄÄÄÄÅ}ÄÄÄÅ~Å}Ä~Å}Ö{Ö|z~ÑzÜzáyÜ{ÄÄ}Ç{Ä}Å|Å{Ä{{}y~{}y|y|yx|wyw|xzxzx|xxx{yÄ~ÄÅ~}ÅÄÄÄ~~Ä~|~}}Ä|~}~~~Ä|Å}Å~Ä{É}ÅÄÄÄÄxÖ{â}ëzë{åpàsâtásÜrÜtásÜvôu®süvémõv¶x§näpáqáoánánà`äv|j¨lòvÅ\ãsÖfâqà{ÉyÉ}ÅÄÄÄ|ÉxÖZîOéOéVç]â`à`à]äâwèzéxáxëwÄ~ÄÄÄÄ~ÄÄÄÄÅ~ÄÄ~ÅÄÄ}Å~Å}Ç}Ç}ÑzãyÄ~~äwåwäxÄÄ~Ç}Ç}Ç}Ä}Å|Å{{~|~|}yy|y{z}||z~|}{}}}{}|ÄÄ~Ä~ÅÄ~~ÄÄÄ~~Ä~~Ä~Ä~~~Ä{zÇ~Ä}Ç}Å}Ç}ÅÄÄ~É}tÖzÑ}í~í~ìpétárÜsárÜtÜsñpüiìjñ{Éhîgïhñr•mäqÜnánàjáeâdãd∞mód¢\åÄÄÄ~ÄÄÄbíHñFòCñGñTçZÜdÑbÜ`à\ãYãYå^åäxàwìtÄÄÄÄÄÄÅ~ÄÄÄÄÄ~ÄÅ~Ç~ÄÄ~éyêzà{{Ä~Ç}Å~Å~Ä~ÄÇ}Ñ{É|Å}Å}ÄzyÄx~x}yy{x{x|v~x~z|~{~zÄ}ÇÅ~}Å~ÄÄ~Å~Ä~ÄÄ|}ÄyÅ~Å|Å}Å}ÅÄÄ~ÄÄxÑ|å|ê|ì~ïráráqÜtÜrÖqàqàgìiìiîzÑhîeîgïlåoäoánákàmàdäaäk±iúk¨`âÄÄÄÄÄTìPíQîPíIîJêQåXäYäXçTéTéTçWéWçVãYåëtér~ÄtásátÖÅ~Ä~ÄxÜvâuàzÉyÑÄÅ~Ä}Å|Å~Ä|ÅÅ~Ä~ÄÄÉ~ÄÅ~ÄÄ~ÄÄ~ÄÄÄ~ÄÄÅÇ}Å}Ç}É|Ç}Ç}Å}Å~ÄÄÄÅ}Å}Ä~}ÄÄ}ÄÄ~}Ä~~Ä~~~}Å~Å}Å}ÇÄÄÄÄÄyÖ}çèÄê}ívÜuáqÜrÜrÜqàsâhîkìjíyÖgìhîhîiîpáqàmámâkâbäqúiÆiöjØ]äÄÄÄÄuÑUê`è]èWéOìIèNèOëQëLíPêOêPëUêSèTéVéYåYåfäxÜ|ÇvàváyÜkêkêiêiëhíiêrä~Å~{ÅyÄzÇ}ÄÄÄÄÄÄÄÄÄÄÄÅ~Ç}Å~Å~Ç}ÖÄÄ~Å~ÅÄÇ}ÄÄÄÇ}ÄÄ~ÄÅÄÄÄ~ÄÄ~ÄÄ~~ÄÄÄ~Ä}ÄÄ~ÅÄ~ÅÄ~ÄÄÄxÜzá|à}ä|êvÜtÜtÑsáuávÖmíiìiìhìzÑiìiïiîhìpáoàqànÜmádãm¢m£séfòkéÄ[ëcé`çcåfë=òHèMèMêGíKëLìPìOíQêOèQéSçXç[çnä_éçuêsëxå{Å~ÄÄÄÄÄÄÄÄÄ~Å~Å~Ç}É|äwÜzÅ~Ç}ÄÅ~Å~ÄÄÄÅ~ÄÄ~Å|ázäyã~ÄÅ~Å~Ä~vçuäuäuàvéwãuâvàÄ~ÄÄÄÄÄÄÄÅ~Ä~ÄÄ~Ä~|}~Ä~ÄÄÄÄÄÅ~ÄÄuàuâ~Å|Åwâ{Çqã|Ç|Ç|ÇzÉjë|}néyÉyÑ{ÉxÖiëxÖhíwÖyÖxÉvÜaódîmàlák°hì[ãkçféiéjéUãVâTáQãOéRçOèQêUéVèWåUè[ê\è[éXç]éfåÉ|ïtçwÅ~~|É{É|Ç|Ç{ÇÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ|ÄÄÄÅ~ÄÅ}Ä~Ç~ÄÄÅ~Å~Å~Ä~Ç~ÄÅ~ÄÄÅ}Ç}ÄÄÄÇ}ÄÄÄÄÄÄ~Ä~ÄÄ~{ÄÄÄÄ~ÄÄÄÄÄÄÄÄÅÅxÜxåzÑpçxÖwûy†xüvã{ÉnéyÑvñy¢vüuèxÇmèzÑvév†t°qçzÑ|Öoäkã~É{ÑiçiélånçtâtàräWäRâPäPçPåSçSêWëYêTêXèXêYé^éaçoÖÄÄ~ÄÄ~ÄÄÄÄÄÄÄÄÄÄÄ~~ÄÇ}Å~ÄÄÅ}Ä~ÄÄ~ÄÄÄÄ~Å~Ä~ÄÄÄÄÄÄÄÄÑ|ÄÄÄÄÄÄÄÄÄ|~}~ÄÄÄÄÄwïÄÄÄÄÄÄÄÄÄÄÄÅ~ÅÄÅÇÇÉÇÅÅÄÅÅÇ}ÇÄÇÅÅÅÇÇÅ~Ç~Ä}ÉÇÉÇÇ}ÑyÖ~Ñ|Ñ}É}Éyálâjãjè|ÇzÑÄ}ÅtÜ]â`â]éXê[ë[ëXêZè\é]é^èaé`åcâ~ÄÄÄÄ~ÄÄ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄ~ÄÅ~Ä~ÄÄÄÅ~ÄÄÄÄ~ÄÄ}ÄÄáÄÄÄÄÄÄÄÄÄ~ÄÄ~ÄÄÄ~Å}Å|ÉÄÄÄÄÄÉÅ~ÉÅÅ~Ç}Ç|É}É{ÇÇ|Ç}Å|Ç}Å}Ç{Ñ{ÇÇÇÅ|Ñ~É|É{É}Ñ|É{Å|ÅzÉzÉ|ÇÄ|Ésàbâ`å`é`ê]é^ê^è_è`çZè`ç]çaãhÜÄ}Å}ÇÄÄÄ}ÄÄ~~ÄÄ~Å|ÇÄÄÄÅ~Ä~Ä~ÄÄÄÅ~ÅÄ|Å|Ç~Ç|Ç|É|Ç|Ç{ÇzÉ}Å}Å~ÄÄ~ÄÄÄÄÄÄÄ~~~~~ÄÄÄÄÄÄÄÄÄÄÄÄÅ}Ä~ÅÅÅÅ~É~ÇÄÇ~Å}ÉÄÄ~ÅÄÅ~ÅÄÄ~Å|É}Ç}Å|ÑÇ~É}Ç}ÅwÉwÖxÖxÜxÖsàiådå`äbéaçbèbècégécåcãaèdçdähäÄ~Ä}ÅÄ~ÄÄ~ÄÄÄ}ÅÄÄ~Ä~~~Ä~~ÅyÇzÉzÇ{ÇÄÄÄÄ~ÄÄÄÄÄÄÄÄÄ~Ä~Ä~ÄÄ~Å{ÑÅ~Å~Å|Ç~Ä~ÅÄÄ~~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅ}ÇÄÄÄÅÇÅÅÅ~Å~ÅÅ~Å~Ä~ÅÅÇ}É}Ñ|Ç|Ç|ÇÄ{Ç|Ç|ÇzÉxÑzÑxÑxÖyÖxÖxÖhéiçlåfãhçfåhäiåeãeâlà~ÄÄ|Å~~ÄÄ|Å~Ä~Ä~ÄÄÄÄ~ÅÄÄÄÄ}Ä{Å}Å|É|É~~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ}ÇÄÄÄÄÄ~Å}Å|Ç~Å}Å}Å}Ç{Ç|ÉzÉ{Å{ÅzÅ{Ç{Ç{ÇzÉ{É|Å|Ç}Å}Ç}Å|Ç}Ç{É|Ç{ÉzÑ{ÉzÉwÜyÖzÑyÖzÑwÖyÖzÖxÜyÖyÖyÖyÖyÖzÖzÑwÜ{ÑxÖyÖxÖxÜyÖzÑ{ÉvÖwÖwÖvÜvÖuÖtávàtâtàwáwáuàqãoânâmàoâoÖwÉ|Å~Å~Ä~Ä}ÄÄÄ~Ä|}~~ÅÄÄÄÄÅÄ{ÄzÅ{Ç~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄ~ÄÄ~ÅÄÄÄ~ÄÄÄ}ÅÄÄ~Å}Å~Ä}Ç|É~Å~Å|Ç~Ä}Å{Ç~Å~Ä|Å~Ä~Å|Å}Å|Ç~Å|Ç|Ç~Ä~Å|Å{É|ÉzÑ|ÉyÑ{ÉzÑ{ÑzÑ{Ñ{É{É|ÉxÖzÑ{ÉzÑ{É{É|ÉyÑxÖzÑ{ÉzÑyÖyÖ{ÉxÖ{ÉzÑyÑyÑxÖxÖwÜváváuâtârãtâyÑzÑ{ÉyÉzÉwÖsÖvÑuÖuÑyÑ}Å|Å}Å}Ä|ÅÄÄ~ÄÄÄ~Ä~ÄÄ~ÄÄ}~Å~Ä~Å~ÄÄÄÄÄÄÄÄ~ÄÄÄÄÄÄ~ÄÄÄÄÄ~Å~ÄÄ~ÄÄ~Ä~Ä~Ä}ÇÄ|Ä}ÅÄ~Ä}Å~Ä|Ç{Å|Ä~Å|Ä}Å~Å~Ä|Å}Ç{Ç|Ç|Å|Ç~Å~Å{Ç}Å}Ç{É{ÉzÑzÉzÑ{ÑzÑzÑzÑ{Ñ{ÑzÑyÖ{ÉyÖzÑ|ÉyÑzÑzÉ{ÉzÉzÉzÑyÖ{ÑzÑyÖyÑyÑzÑyÇzÉzÉvÑyÑwÜvÜtàvÜsáváuÖyÑxÖuÑtÖtÉtÑuÑtÖuÉ{ÇÄ}Å~Ä}ÅÄ}Å}Ä~ÄÄÄÄ~ÄÄ{Å~Å}Å~ÄÄ~ÄÄÄÄÄÄÄ~ÇÄÄÄ~ÅÄÄ~ÄÄÄ~Å~ÄÄÄ~ÄÄÄÄ~Ä~Ä}Ä}ÅÄ}Ä|Å~Å~ÅÄ}Å}Å}Å}Å}Ç}Ä|Ç}Å~Ä|Å|Ä~Å|Å|Å|Ç|Ä{ÇzÅ{ÇzÑ|Ç{Ñ|Ç{ÉzÑ{É|ÇzÑzÉ{É{É{ÉzÑ{ÉzÑyÑxÉzÑzÑzÉ|ÉyÖzÑyÉzÉzÑyÖ{ÉzÉzÑ{ÉzÇ|ÅzÇxÑyÉxÑxÖxÑwÑxÜzÉvÜzÑwÉwÑvÑvÑuÑtÖxÉyÉ}Ç~Å~Ä~ÄÄÄÄ~ÅÄ~ÄÄ~ÄÄÄ~}Ä|Å}ÅÄÄÄÄÄÄÄÄÄÄÄ~Å~ÄÄ~ÄÄÄÄÄÄÄ~Ä~Ä~Å~ÄÄ~ÄÄÄÄ}Å~Ä~Ä}Ä}ÅÄ~Ä}Å}Å}Å}Å{Ç}Ä|Å|Å|Ç|Ç|Ç}ÅzÉ}Ä}Ç|Ç|Ä|É|Å|Ç|ÇzÑ{Ñ{É{É|É{ÉzÑ{É{ÑzÉzÖzÑzÑ{É{ÑzÑyÑ{ÉzÑyÑzÉzÑzÇxÑzÑzÖzÑzÑ}ÅzÑ{É{ÇzÇzÉyÉyÑvÑtÑxÉxÑwÉwÑvÑwÑwÑvÑuÑvÑvÑxÉ|Ç~Ä~ÄÄ~~Ä}Å~ÄÄÄÄÄÄÄÄÄÄzÉ}Å~ÅÅ~Å~ÄÄÄÄ~ÄÄÄÄ~ÄÄÄÄ~Ä~Ä~ÄÄÄÄÄÄ~ÄÄ}Å~Å~Ä}Å}ÄÄ~Å~ÅÄ~Å}Å{ÇÄ|Ä}Å}Å{Ç}Å|Ä}Ç|Å|Å~Ä}Å{É{É|Å}Å|É{Ñ|ÇzÖ{ÉzÑ|ÇzÉzÑ{ÉzÑyÑzÑyÖ|ÉxÖzÑ|ÉzÑzÑyÖyÉzÉzÇ{ÉwÑyÖyÉzÑzÑxÑzÉ{Ç{Å{Ç}Å}ÅyÑwÇxÉuÇxÑxÑwÑwÖxÖxÖwÑwÑxÉxÑzÉzÉ|Ç~Å~Ä~Ä~ÄÄ~ÄÄÄÄÄ~Ä~ÄÄÄÄ|Ç~ÄÄÅ~ÄÄÄ~ÄÄÄÄÄÄ~Ä~ÄÄÄÄÄÄÄÄÄ~Ä}Å~~~Ä~~Ä~Å~Å~Ä~Ä~Å}Ä}Å}Å}Ç{Å|Ç|Å{Å{Å}Ç{ÇzÇ{Å|Ç}Ç{Ç~Å|Ç|Ç{Ç|É|É|É{ÑzÑyÖyÑzÉ{ÉzÉyÑzÑzÑzÑ{ÑzÉzÑzÉzÉyÑ|ÇzÉ{ÉxÉ{ÉzÑ{ÑxÜyÑzÉ|Ç|Ç|Ç|Ä}Å{ÅyÇyÉyÉwÑwÇwÑxÉuÑzÉxÖxÑwÑzÑyÉyÉ{Å|Å}Å~Ä}ÄÄÄÄ~Å~ÄÄÄÄÄ~Å~ÄÄ}Ä{ÇÄÄÅ}ÄÄÄÄÄÄÄÄÄÄÄÄ~Ä~ÅÄÄÄÄ~ÅÄÄÄÄ~Ä~Ä~Å}Å~Ä~}Ç~Å}~}Å|Å~Ä}Ä}Å}Ä~Ä{Ç}Å|É{Å}Å}Å|Ä}Å|Ç}Å}Å|Ç|Ç{Ç{Ç{É{Ñ{ÉzÑ{ÑzÑyÉyÉ}Ç{ÉyÑxÑyÖyÑ{É{ÉyÑ{É|ÉyÑ{ÉzÉzÉyÑ{ÉzÖzÑxÖzÖzÉ|Å|Å{Ç|Å|Å}Ä|Ç|ÇyÇyÑvÑwÉxÑwÉwÑxÉvÑzÉ{ÉxÑyÇ|Ç}Å~Ä}Å}ÅÄ~Ä~ÄÄÄÄÄÄÄ~Ä}ÅÄÄÄÄ~ÄÄzÑ~ÄÇ~ÄÄÄÄÄÄÄÄÄÄ}ÅÄÄÄÄ~ÄÄÄÄ~Å~Ä~Ä~Ä}Å~Å|Ç~Ä}Å}Å|Ç}Å~Ä|Å}Å~Ä~Ä|Ç}Å}Å|Å}Å~Å{Å}Å}Å{Å{É{Ç|ÇzÉ|ÇzÑ{É{ÉzÉ{ÉzÑ|ÉxÖzÉ|É{É{É|ÇzÑ{Ñ{É{ÉzÉzÉ{ÉzÉzÑyÑzÉzÑzÑ{É{Ç}Å~Ä{Ä~Å}Å{Ç|Ç{ÇyÇzÑzÇxÇyÇyÉyÑyÉ{ÉzÇ{Å{Å}Å~Ä}Ä~Ä~~ÅÄ}Å~ÅÄ~~ÅÄÄ~ÄÄÄÄÄÄÄÄÄ~Å}ÅÄÄÄÄ~ÄÄÄ~Ä~ÄÄÄ}Å~Å~Ä~ÄÄ~Ä}Å~Ä~ÅÄ}Ç~Ä~Ä}ÄÄ~Ä~Å}Å|Å~Å}Ä~Å|Ç|Ä|Å}Å}Å~Ä}Å}Ç}Ä}Å}Å}ÅÄ{Å{Å|Ç}Ç|Ç{É|Ç{Ç{Ñ|É{Ç|ÉzÑ|ÉzÉ{ÉzÑ|É{ÑyÑ|ÇzÑ{É{É{ÇyÇ{É{ÇzÉ{ÑzÉ{É|Å|Ç|Å|Å|Å{Ç}Ç}Å{ÇzÉyÉyÉzÇzÉzÇwÉyÇyÇzÇ{Å}Å|Å}Å~ÄÄÄÄ~Ä~ÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÄÄ~Å{Ç}Å~ÄÄÄÄÄÄÄÄÄÄ~Å~Ä}ÅÄ~Ä~Ä}Å~Å~ÅÄ~ÅÄ~Å~Ä}Ä~Ä}Å}Å}Ç}Å}Å|Å|Å|Ç}Å}Å}Å}Ä}Ä~Ä|Å}Å|Å}Å|ÇzÅ}Å|Ç|Ç|Ç|Å{É|É{Ç|ÇzÉ{Ç|Ç{É{Ñ|É{É|ÉyÖzÑzÑ{É|Ç{É|ÇzÉ|ÇzÇ{ÉzÑ{Ñ|É{Ç}Å}Å}Ç~Ä|Ä}Ä~Ä|ÅzÅyÉyÇzÉ{Ç{Ç{ÇzÇ|Å|ÅyÇ|Ç~Å}Å|Ç~ÅÄ}Å~ÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄ~ÄÄÄÄÄ~ÄÄÄÄ~ÅÄÄÄÄÄÄÄ}Ä|Å~Ä}ÅÄÄ~Å~Ä}Å}Ç}Å~Ä~Å}Å~Ä{Ä}Å~Ä}Ç{Ç}Å~Å~ÄÄ}Å|Å|Ç|Ç}Å~Ä|Å|É|Ç|Ç|Ç|Ç|É{Ç|Ç{É|É|Ç{ÉzÑ{Ç|Ç{Ç{É|ÉzÉzÇyÉ{Å|Ç}Å{ÇzÇ{Ç}Å|Ç}Å}Ç|Ç~Å}Å}Å~Ä~Å}Å|Å|ÇxÅ{Ç{Ç|ÇyÅ|Ç}Ç|Ç{Ç~Ä~Å{ÄÄÄÄ~Ä~Ä}Ä~ÄÄÄÄÄÄ~ÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~Ä~ÅÄÄ~Å~ÅÄ}Å~ÄÄ}~Ä~Ä~ÅÄ~ÅÄ~Ä~Ä}Ç|Ä}Ç}Å~ÄÄ|Å}Ä~Ä|Ç~Å|ÅÄ}Å}Å}Å|Ç~Å{É}Å|É|É{É{É{ÉzÇ{É{ÉzÉ|ÇzÇ}Å|É{Ç|Ç|ÉzÑ|É{Ñ}Ç{ÇzÉ}ÇzÇ}Å}Ç}ÇzÑ}Å}Ç}Å~Å}Å}Å~Ä}Å}Ä|Å{Å}Ç{Å|ÇzÅ|Å|Å|Ç|Å|Å{Ç}Å~Ä}Å~ÄÄÄÄÄÄÄ~Ä~ÄÄÄ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄÄ}ÅÄ~Å~Ä~Å}Å}Ä~Ä~Ä}Å~Ä}Å|Ä}Ä~Ä}Å~Ä~Å}Å}Ä}Ä}ÅÄ}Å}Ç}Å}Å|Ç{É|É{Ç|Ç|Ç}ÇzÉ}Å{Ç}Å|Å|É}Ç}Ç{Ç{É|ÇzÇ}Å{Ç|Ç|Ç|Ç}Ç|Ç}Ä}Å~Ä}Å~Ä~Å~Ä|Å}Ä~Ä~Å|Å|Å{Å|Ç~Å}Å}Å}Å~Ä~Å~Ä}Ä}ÄÄ~ÄÄ}Ä~Ä~ÄÄÄ~Ä~ÄÄÄ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÄ~Ä~ÄÄ~ÄÄ~Å~ÄÄ~Ä|Å}ÅÄÄ|Å}Ä|Å|Å}Å{Å}Å}Å|Ç~Ä}Å}Ä~Ä}Å}Ä}Ç|Ç|Ç{É{É{É|Å|Å}Ç}Ç~Å|É}Ç|Ç|É{Ç|Ç{É}Ç}Ç|Å}Å|Ç}Å{Ç}Å~Å}Å|Ç|Ç~Ä}Ä~Å~Å}Å~Ä|Å~Ä|Å{Ç|Å}Å{Å}Å}Å}Å~Ä}Å}Ä~ÄÄ~ÄÄ~ÄÄÄÄÄÄ~Ä~Ä~ÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÄÄÄÄ~Ä~ÄÄ}Ä~Ä~ÄÄÄ~Å~Ä}Å~ÅÄ~Å}Å~Å~Å~Å}Ä~Ä}Ç|Å|Ç}Å{Ç|Ç~Ä}Å}Ç|Å~Å}Å~Ä|Å|Ç}Å{Ç{Ç|Ç}Ç}Å}Å|Ç{Ç}Ç|É|Ç}Å|Ç}Ç|Ç}Ç|Ç{Ç}Ç|Ç}Å|Å}Ç|Ç|Å}Å|Å~Ä}Ä~ÅÄ~Ä~Å~Ä}Å}Å}Å|Å}Å|Å|Å}Å}Ä|Å~Ä}ÇÄÄÄÄ~Ä~Ä~ÅÄ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~Ä~ÅÄ~ÄÄ~Ä~Ä~ÅÄÄ~ÄÄ~ÄÄÄ}Ç}Ç}ÇÄ}Ä}Å~Å~Ä}Ä~Ä|É~Å~Ä~Ä}Å}Ç}Å|Ç|Ç}Ä|Ç|Ç|Å|Ç|Ç{É|Ç|É|Ç|Ç{Ç}Å}Å|É|Ç{Ç|Å{Ç|Å|Å~Å|Ç|Ç|Ç{ÇÄ~Å~Ä~Ä~Å}Ä}Ä}Ä~Ä|Å~Ä|Å}Å}Å}Ä~Ä}Å~Å~Ä|ÄÄ~ÄÄÄ~Ä~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄ~ÄÄÄÄ~Ä~Ä~Ä~ÄÄ~~ÄÄÄÄ~ÄÄ~Ä}Å~Å~Å~ÅÄ~Ä}ÅÄ~Ä~Å}Å}ÅÄ}Å~Å|Ç}Å{Å}ÄzÉ}Ç}Ç}Å~Ä|Ç|Å}Ç|É}Ä}ÅÄ|Ç{ÇÅ|Å|Ç}Å}Å}Å|Å~ÄÄÄ~Å~Ä~Ä~Ä}Ä|Ç~ÅÄ~ÄÄ}Ä~Å~Ä~ÄÄ}ÄÄÄÄ}ÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÄÄ~ÅÄÄ~Ä~ÅÄÄÄÄ~Å~Å~Ä}ÅÄÄ~Ä~Å~Ä|ÄÄ~ÅÄ}Å}Å~Ä~Å}Å}Å|Ç}Å~Ä}Ç|Ç}Å}Ç|Ç|ÅzÉ}Å~Ä}Ç~Ä}Ç|Å}Ä}Å|Å}Ä}Å|Å~Ä}Å~Å}Å~Å~ÄÄ~Ä~Ä~ÄÄÄ}}Ä~Ä~Ä}ÄÄ~Ä}ÅÄ~ÄÄ~Å}Ä}ÅÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~~ÅÄÄÄÄ~ÄÄÄÄ}Å~Ä~Å|Å~ÄÄ~Ä~Ä~~Å~~~Ä|Å}Ç}Å~Ä~Ä~ÄÅ~Ä}Å}Ç~Ä~Å}Ç{É~ÄÄ~Å~Ä|Ç~Å~Å~Å~Å}Å}Å}Ç~Å|Å|Å|Å~ÇÄ}Å}Å~Å}Å|Ç~Ä~Å~Å~ÅÄ~Ä~Ä~Ä}ÄÄ~Ä~Ä~Ä~Ä~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄÄ~ÄÄÄ~ÄÄÄ~ÄÄÄÄÄÄÄ~ÄÄÄ~ÅÄ}Ä~Ä}ÅÄ~ÄÄ~Ä~Ä~Ä~Å~Å}Ä~Å~ÅÄ}Ä}Ç~Å}ÅÄ}Å|Å}Ä}Å}Ç~Ä}Å~Ä~Ä|Å{Å}Å}Å~Ä~Ä~Ä~Å}Å}Å|ÇÄ}Å|Ç}Ä}Ä~Å~Ä~Ä~ÄÄÄ~ÄÄ~Ä~Ä~ÄÄ}ÄÄ}Ä~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ~ÅÄÄÄÄÄÄÄÄÄ~Ä}Å~ÄÄ~ÅÄ}Ä~Å~Å~Å~ÄÄ~ÄÄ~Ä~Ä~}Å~Ä~Ä~Ä~Ä}Å~ÅÄ~Ä|Ç~Å|Ç~Ä}Å}Å}Å~Å~Ä}Å~Ä~Å}Å}Å~Ä~Ä|Å}Å}Ä}ÅÄ~Ä~ÄÄ~Å~Ä~Å~Ä~ÅÄÄÄÄ|ÅÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÄÄÄ~ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
\ No newline at end of file
diff --git a/examples/libva_buffer_sharing/libva_buffer_sharing.cpp b/examples/libva_buffer_sharing/libva_buffer_sharing.cpp
new file mode 100644
index 0000000..04fe359
--- /dev/null
+++ b/examples/libva_buffer_sharing/libva_buffer_sharing.cpp
@@ -0,0 +1,443 @@
+/*
+ * Copyright (c) 2012 Intel Corporation. All Rights Reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sub license, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial portions
+ * of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
+ * IN NO EVENT SHALL PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR
+ * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+ * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <stdint.h>
+#include <errno.h>
+
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <va/va.h>
+#include "va_display.h"
+
+#include <va/va_drmcommon.h>
+#include "utest_helper.hpp"
+
+#include <getopt.h>             /* getopt_long() */
+
+typedef cl_mem (OCLCREATEIMAGEFROMLIBVAINTEL)(cl_context, const cl_libva_image *, cl_int *);
+OCLCREATEIMAGEFROMLIBVAINTEL *oclCreateImageFromLibvaIntel = NULL;
+
+char *input_nv12;
+char *output_nv12;
+int frame_size;
+int picture_width, picture_height;
+unsigned char *newImageBuffer;
+VADisplay	va_dpy;
+cl_int cl_status;
+VAStatus va_status;
+
+static const char short_options[] = "i:r:o:h";
+
+static const struct option
+long_options[] = {
+  { "input", required_argument, NULL, 'i' },
+  { "help",   no_argument,       NULL, 'h' },
+  { "resolution", required_argument,       NULL, 'r' },
+  { "output",  required_argument, NULL, 'o' },
+  { 0, 0, 0, 0 }
+};
+
+#define OUTPUT_NV12_DEFAULT "./out.nv12"
+#define WIDTH_DEFAULT 256
+#define HEIGHT_DEFAULT 128
+
+#define CHECK_VASTATUS(va_status,func)                                  \
+  if (va_status != VA_STATUS_SUCCESS) {                                   \
+    fprintf(stderr, "status = %d, %s:%s (%d) failed,exit\n",va_status, __func__, func, __LINE__); \
+    exit(1);                                                            \
+  }
+
+#define CHECK_CLSTATUS(status,func)                                  \
+  if (status != CL_SUCCESS) {                                   \
+    fprintf(stderr, "status = %d, %s:%s (%d) failed,exit\n", status, __func__, func, __LINE__); \
+    exit(1);                                                            \
+  }
+
+static void usage(FILE *fp, int argc, char **argv)
+{
+  fprintf(fp,
+      "\n"
+      "This example aims to demostrate the usage of gpu buffer sharing between libva and Beignet.\n"
+      "The input and output file are nv12 format.\n"
+      "Please use the following command to see the result:\n"
+      "gst-launch-1.0 filesrc location=file_name ! videoparse format=nv12 width=xxx height=xxx ! imagefreeze ! videoconvert ! video/x-raw, format=BGRx ! ximagesink\n"
+      "(Please install gstreamer1.0-plugins-base, gstreamer1.0-plugins-bad, \n"
+      " gstreamer1.0-x by apt on Ubuntu, in order to use gst-launch-1.0)\n"
+      "For more details, please read docs/howto/libva-buffer-sharing-howto.mdwn.\n"
+      "\nUsage: %s [options]\n\n"
+      "Options:\n"
+      "-i | --input=<file_name>           Specify input nv12 file name like /home/xxx/in.nv12\n"
+      "-h | --help                        Print this message\n"
+      "-r | --resolution=<width,height>   Set input resolution\n"
+      "-o | --output=<file_name>          Specify input nv12 file name like /home/xxx/out.nv12\n"
+      "",
+      argv[0]);
+}
+
+static void analyse_args(int argc, char *argv[])
+{
+  input_nv12 = NULL;
+  picture_width = 0;
+  picture_height = 0;
+  output_nv12 = NULL;
+
+  int c, idx;
+  for (;;) {
+
+    c = getopt_long(argc, argv,
+        short_options, long_options, &idx);
+
+    if (-1 == c)
+      break;
+
+    switch (c) {
+      case 0: /* getopt_long() flag */
+        break;
+
+      case 'i':
+        input_nv12 = optarg;
+        break;
+
+      case '?':
+      case 'h':
+        usage(stdout, argc, argv);
+        exit(0);
+
+      case 'r':
+        sscanf(optarg, "%d,%d", &picture_width, &picture_height);
+        break;
+
+      case 'o':
+        output_nv12 = optarg;
+        break;
+
+      default:
+        usage(stderr, argc, argv);
+        exit(1);
+    }
+  }
+
+  if(!input_nv12){
+    input_nv12 = INPUT_NV12_DEFAULT;
+  }
+  if(!output_nv12){
+    output_nv12 = OUTPUT_NV12_DEFAULT;
+  }
+  if(picture_width == 0 && picture_height == 0){
+    picture_width = WIDTH_DEFAULT;
+    picture_height = HEIGHT_DEFAULT;
+  }
+  return;
+}
+
+
+static void initialize_va_ocl(){
+  int major_ver, minor_ver;
+
+  printf("\n***********************libva info: ***********************\n");
+  fflush(stdout);
+  va_dpy = va_open_display();
+  va_status = vaInitialize(va_dpy, &major_ver, &minor_ver);
+  CHECK_VASTATUS(va_status, "vaInitialize");
+
+  //ocl initialization: basic & create kernel & get extension
+  printf("\n***********************OpenCL info: ***********************\n");
+  if ((cl_status = cl_test_init("runtime_gray_effect.cl", "runtime_gray_effect", SOURCE)) != 0){
+    fprintf(stderr, "cl_test_init error\n");
+    exit(1);
+  }
+
+  oclCreateImageFromLibvaIntel = (OCLCREATEIMAGEFROMLIBVAINTEL *)clGetExtensionFunctionAddress("clCreateImageFromLibvaIntel");
+  if(!oclCreateImageFromLibvaIntel){
+    fprintf(stderr, "Failed to get extension clCreateImageFromLibvaIntel\n");
+    exit(1);
+  }
+}
+
+static void upload_nv12_to_surface(FILE *nv12_fp, VASurfaceID surface_id)
+{
+  VAImage surface_image;
+  void *surface_p = NULL;
+  unsigned char *y_src, *u_src, *v_src;
+  unsigned char *y_dst, *u_dst;
+  int y_size = picture_width * picture_height;
+  int u_size = (picture_width >> 1) * (picture_height >> 1);
+  int row, col;
+  size_t n_items;
+
+  n_items = fread(newImageBuffer, frame_size, 1, nv12_fp);
+
+  va_status = vaDeriveImage(va_dpy, surface_id, &surface_image);
+  CHECK_VASTATUS(va_status,"vaDeriveImage");
+
+  vaMapBuffer(va_dpy, surface_image.buf, &surface_p);
+  assert(VA_STATUS_SUCCESS == va_status);
+
+  y_src = newImageBuffer;
+  u_src = newImageBuffer + y_size; /* UV offset for NV12 */
+  v_src = newImageBuffer + y_size + u_size;
+
+  y_dst = (unsigned char *)surface_p + surface_image.offsets[0];
+  u_dst = (unsigned char *)surface_p + surface_image.offsets[1]; /* U offset for NV12 */
+
+  /* Y plane */
+  for (row = 0; row < surface_image.height; row++) {
+    memcpy(y_dst, y_src, surface_image.width);
+    y_dst += surface_image.pitches[0];
+    y_src += picture_width;
+  }
+
+  if (surface_image.format.fourcc == VA_FOURCC_NV12) { /* UV plane */
+    for (row = 0; row < surface_image.height / 2; row++) {
+      for (col = 0; col < surface_image.width / 2; col++) {
+        u_dst[col * 2] = u_src[col];
+        u_dst[col * 2 + 1] = v_src[col];
+      }
+      u_dst += surface_image.pitches[1];
+      u_src += (picture_width / 2);
+      v_src += (picture_width / 2);
+    }
+  } 
+
+  vaUnmapBuffer(va_dpy, surface_image.buf);
+  vaDestroyImage(va_dpy, surface_image.image_id);
+}
+
+static void create_y_image_object_from_libva(VAImage *surface_image,
+                                             VABufferInfo *buf_info,
+                                             cl_mem *yio_p)
+{
+  cl_libva_image info_image;
+  info_image.bo_name = buf_info->handle;
+  info_image.offset = surface_image->offsets[0];
+  info_image.width = surface_image->width;
+  info_image.height = surface_image->height;
+  info_image.fmt.image_channel_order = CL_R;
+  info_image.fmt.image_channel_data_type = CL_UNSIGNED_INT8;
+  info_image.row_pitch = surface_image->pitches[0];
+  *yio_p = oclCreateImageFromLibvaIntel(ctx, &info_image, &cl_status);
+  CHECK_CLSTATUS(cl_status, "oclCreateImageFromLibvaIntel");
+  printf("\nSuccessfully create ocl image object from y plane of VASurface...\n");
+}
+
+static void create_uv_image_object_from_libva(VAImage *surface_image,
+                                              VABufferInfo *buf_info,
+                                              cl_mem *yio_p)
+{
+  cl_libva_image info_image;
+  info_image.bo_name = buf_info->handle;
+  info_image.offset = surface_image->offsets[1];
+  info_image.width = surface_image->width / 2;
+  info_image.height = surface_image->height / 2;
+  info_image.fmt.image_channel_order = CL_R;
+  info_image.fmt.image_channel_data_type = CL_UNSIGNED_INT16;
+  info_image.row_pitch = surface_image->pitches[1];
+  *yio_p = oclCreateImageFromLibvaIntel(ctx, &info_image, &cl_status);
+  CHECK_CLSTATUS(cl_status, "oclCreateImageFromLibvaIntel");
+  printf("\nSuccessfully create ocl image object from uv plane of VASurface...\n");
+}
+
+static void store_surface_to_nv12(VASurfaceID surface_id, FILE *nv12_fp)
+{
+  VAImage surface_image;
+  void *surface_p = NULL;
+  unsigned char *y_src, *u_src;
+  unsigned char *y_dst, *u_dst, *v_dst;
+  int y_size = picture_width * picture_height;
+  int u_size = (picture_width >> 1) * (picture_height >> 1);
+  int row, col;
+
+  va_status = vaDeriveImage(va_dpy, surface_id, &surface_image);
+  CHECK_VASTATUS(va_status,"vaDeriveImage");
+
+  va_status = vaMapBuffer(va_dpy, surface_image.buf, &surface_p);
+  CHECK_VASTATUS(va_status,"vaMapBuffer");
+
+  y_src = (unsigned char *)surface_p + surface_image.offsets[0];
+  u_src = (unsigned char *)surface_p + surface_image.offsets[1]; /* U offset for NV12 */
+
+  y_dst = newImageBuffer;
+  u_dst = newImageBuffer + y_size; /* UV offset for NV12 */
+  v_dst = newImageBuffer + y_size + u_size;
+
+  /* Y plane */
+  for (row = 0; row < surface_image.height; row++) {
+    memcpy(y_dst, y_src, surface_image.width);
+    y_src += surface_image.pitches[0];
+    y_dst += picture_width;
+  }
+
+  if (surface_image.format.fourcc == VA_FOURCC_NV12) { /* UV plane */
+    for (row = 0; row < surface_image.height / 2; row++) {
+      for (col = 0; col < surface_image.width / 2; col++) {
+        u_dst[col] = u_src[col * 2];
+        v_dst[col] = u_src[col * 2 + 1];
+      }
+      u_src += surface_image.pitches[1];
+      u_dst += (picture_width / 2);
+      v_dst += (picture_width / 2);
+    }
+  } 
+
+  fwrite(newImageBuffer, frame_size, 1, nv12_fp);
+
+  vaUnmapBuffer(va_dpy, surface_image.buf);
+  vaDestroyImage(va_dpy, surface_image.image_id);
+}
+
+static void load_process_store_nv12()
+{
+  frame_size = picture_width * picture_height +  ((picture_width * picture_height) >> 1) ;
+  newImageBuffer = (unsigned char *)malloc(frame_size);
+
+  VASurfaceID src_surface_id;
+  VASurfaceAttrib forcc;
+  forcc.type =VASurfaceAttribPixelFormat;
+  forcc.flags=VA_SURFACE_ATTRIB_SETTABLE;
+  forcc.value.type=VAGenericValueTypeInteger;
+  forcc.value.value.i = VA_FOURCC_NV12;
+  va_status = vaCreateSurfaces(va_dpy, VA_RT_FORMAT_YUV420,
+                               picture_width, picture_height,
+                               &src_surface_id, 1, &forcc, 1);
+  CHECK_VASTATUS(va_status, "vaCreateSurfaces");
+
+  //load
+  FILE *in_nv12_fp;
+  in_nv12_fp = fopen(input_nv12, "rb");
+  if (in_nv12_fp == NULL){
+    fprintf(stderr, "Can't open input nv12 file\n");
+    exit(1);
+  }
+  fseek(in_nv12_fp, 0l, SEEK_END);
+  off_t file_size = ftell(in_nv12_fp);
+
+  if ((file_size < frame_size) || (file_size % frame_size) ) {
+    fclose(in_nv12_fp);
+    fprintf(stderr, "The nv12 file's size is not correct\n");
+    exit(1);
+  }
+  fseek(in_nv12_fp, 0l, SEEK_SET);
+  upload_nv12_to_surface(in_nv12_fp, src_surface_id);
+  fclose(in_nv12_fp);
+  printf("\nSuccessfully load source nv12 file(\"%s\") to VASurface...\n", input_nv12);
+
+
+  //create two corresponding ocl image objects from source VASurface
+  VAImage src_surface_image;
+  va_status = vaDeriveImage(va_dpy, src_surface_id, &src_surface_image);
+  CHECK_VASTATUS(va_status,"vaDeriveImage");
+  VABufferInfo buf_info;
+  buf_info.mem_type = VA_SURFACE_ATTRIB_MEM_TYPE_KERNEL_DRM;
+  va_status = vaAcquireBufferHandle(va_dpy, src_surface_image.buf, &buf_info);
+  CHECK_VASTATUS(va_status,"vaAcquireBufferHandle");
+  cl_mem src_y, src_uv;	
+  create_y_image_object_from_libva(&src_surface_image, &buf_info, &src_y);
+  OCL_CALL (clSetKernelArg, kernel, 0, sizeof(cl_mem), &src_y);
+
+  create_uv_image_object_from_libva(&src_surface_image, &buf_info, &src_uv);
+  OCL_CALL (clSetKernelArg, kernel, 1, sizeof(cl_mem), &src_uv);
+
+
+  //create one target VASurface & create corresponding target ocl image object from it
+  VASurfaceID dst_surface_id;
+  va_status = vaCreateSurfaces(va_dpy,VA_RT_FORMAT_YUV420,
+                               picture_width,picture_height,
+                               &dst_surface_id, 1, &forcc, 1);
+  CHECK_VASTATUS(va_status, "vaCreateSurfaces");
+
+  VAImage dst_surface_image;
+  va_status = vaDeriveImage(va_dpy, dst_surface_id, &dst_surface_image);
+  CHECK_VASTATUS(va_status,"vaDeriveImage");
+  va_status = vaAcquireBufferHandle(va_dpy, dst_surface_image.buf, &buf_info);
+  CHECK_VASTATUS(va_status,"vaAcquireBufferHandle");
+  cl_mem dst_y, dst_uv;	
+  create_y_image_object_from_libva(&dst_surface_image, &buf_info, &dst_y);
+  OCL_CALL (clSetKernelArg, kernel, 2, sizeof(cl_mem), &dst_y);
+  create_uv_image_object_from_libva(&dst_surface_image, &buf_info, &dst_uv);
+  OCL_CALL (clSetKernelArg, kernel, 3, sizeof(cl_mem), &dst_uv);
+
+
+  size_t global_size[2];
+  global_size[0] = picture_width;
+  global_size[1] = picture_height;
+  OCL_CALL (clEnqueueNDRangeKernel, queue, kernel, 2, NULL,
+            global_size, NULL, 0, NULL, NULL);
+  OCL_CALL (clFinish, queue);
+  printf("\nSuccessfully use ocl to do processing...\n");
+
+  va_status = vaReleaseBufferHandle(va_dpy, src_surface_image.buf);
+  CHECK_VASTATUS(va_status,"vaReleaseBufferHandle");
+  va_status = vaReleaseBufferHandle(va_dpy, dst_surface_image.buf);
+  CHECK_VASTATUS(va_status,"vaReleaseBufferHandle");
+
+  OCL_CALL (clReleaseMemObject, src_y);
+  OCL_CALL (clReleaseMemObject, src_uv);
+  OCL_CALL (clReleaseMemObject, dst_y);
+  OCL_CALL (clReleaseMemObject, dst_uv);
+  vaDestroyImage(va_dpy, src_surface_image.image_id);
+  vaDestroyImage(va_dpy, dst_surface_image.image_id);
+  cl_kernel_destroy();
+  cl_ocl_destroy();
+
+  //store
+  FILE *out_nv12_fp;
+  out_nv12_fp = fopen(output_nv12,"wb");
+  if ( out_nv12_fp == NULL){
+    fprintf(stderr, "Can't open output nv12 file\n");
+    exit(1);
+  }
+  store_surface_to_nv12(dst_surface_id, out_nv12_fp);
+  fclose(out_nv12_fp);
+  printf("\nSuccessfully store VASurface to dst nv12 file(\"%s\")...\n", output_nv12);
+
+  //release resources
+  vaDestroySurfaces(va_dpy,&src_surface_id,1);
+  vaDestroySurfaces(va_dpy,&dst_surface_id,1);
+
+  vaTerminate(va_dpy);
+  va_close_display(va_dpy);
+}
+
+
+int main(int argc, char *argv[])
+{
+  analyse_args(argc, argv);
+
+  initialize_va_ocl();
+
+  load_process_store_nv12();
+
+  printf("\nExample run successfully!\n");
+  printf("\nNote: The input and output file are nv12 format.\n");
+  printf("Please use the following command to see the result:\n");
+  printf("gst-launch-1.0 filesrc location=%s ! videoparse format=nv12 width=%d height=%d ! imagefreeze ! videoconvert ! video/x-raw, format=BGRx ! ximagesink\n", output_nv12, picture_width, picture_height);
+  printf("(Please install gstreamer1.0-plugins-base, gstreamer1.0-plugins-bad,\ngstreamer1.0-x by apt on Ubuntu, in order to use gst-launch-1.0)\n");
+
+  return 0;
+}
diff --git a/examples/libva_buffer_sharing/sysdeps.h b/examples/libva_buffer_sharing/sysdeps.h
new file mode 100644
index 0000000..4de764d
--- /dev/null
+++ b/examples/libva_buffer_sharing/sysdeps.h
@@ -0,0 +1,79 @@
+/*
+ * Copyright (c) 2007-2009 Intel Corporation. All Rights Reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sub license, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ * 
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial portions
+ * of the Software.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
+ * IN NO EVENT SHALL INTEL AND/OR ITS SUPPLIERS BE LIABLE FOR
+ * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+ * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef SYSDEPS_H
+#define SYSDEPS_H
+
+#ifdef HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdbool.h>
+#include <string.h>
+#include <stdint.h>
+#include <assert.h>
+
+#ifdef ANDROID
+# define Bool  int
+# define True  1
+# define False 0
+
+/* Macros generated from configure */
+# define LIBVA_VERSION_S "1.1.0"
+
+/* Android logging utilities */
+# include <utils/Log.h>
+
+# ifdef ANDROID_ALOG
+#  define va_log_error(buffer)  do { ALOGE("%s", buffer); } while (0)
+#  define va_log_info(buffer)   do { ALOGI("%s", buffer); } while (0)
+# elif ANDROID_LOG
+#  define va_log_error(buffer)  do { LOGE("%s", buffer); } while (0)
+#  define va_log_info(buffer)   do { LOGI("%s", buffer); } while (0)
+# endif
+#endif
+
+#ifndef va_log_error
+#define va_log_error(buffer) do {                       \
+        fprintf(stderr, "libva error: %s", buffer);     \
+    } while (0)
+#endif
+
+#ifndef va_log_info
+#define va_log_info(buffer) do {                        \
+        fprintf(stderr, "libva info: %s", buffer);      \
+    } while (0)
+#endif
+
+#if defined __GNUC__ && defined HAVE_GNUC_VISIBILITY_ATTRIBUTE
+# define DLL_HIDDEN __attribute__((visibility("hidden")))
+# define DLL_EXPORT __attribute__((visibility("default")))
+#else
+# define DLL_HIDDEN
+# define DLL_EXPORT
+#endif
+
+#endif /* SYSDEPS_H */
diff --git a/examples/libva_buffer_sharing/va_display.c b/examples/libva_buffer_sharing/va_display.c
new file mode 100644
index 0000000..dd58dd2
--- /dev/null
+++ b/examples/libva_buffer_sharing/va_display.c
@@ -0,0 +1,166 @@
+/*
+ * Copyright (c) 2012 Intel Corporation. All Rights Reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sub license, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ * 
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial portions
+ * of the Software.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
+ * IN NO EVENT SHALL PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR
+ * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+ * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#include "sysdeps.h"
+#include <stdio.h>
+#include <stdlib.h>
+#include <stddef.h>
+#include <string.h>
+#include <va/va.h>
+#include "va_display.h"
+
+extern const VADisplayHooks va_display_hooks_android;
+extern const VADisplayHooks va_display_hooks_wayland;
+extern const VADisplayHooks va_display_hooks_x11;
+extern const VADisplayHooks va_display_hooks_drm;
+
+static const VADisplayHooks *g_display_hooks;
+static const VADisplayHooks *g_display_hooks_available[] = {
+#ifdef ANDROID
+    &va_display_hooks_android,
+#else
+#ifdef HAVE_VA_WAYLAND
+    &va_display_hooks_wayland,
+#endif
+#ifdef HAVE_VA_X11
+    &va_display_hooks_x11,
+#endif
+#ifdef HAVE_VA_DRM
+    &va_display_hooks_drm,
+#endif
+#endif
+    NULL
+};
+
+static const char *g_display_name;
+
+static const char *
+get_display_name(int argc, char *argv[])
+{
+    const char *display_name = NULL;
+    int i;
+
+    for (i = 1; i < argc; i++) {
+        if (strcmp(argv[i], "--display") != 0)
+            continue;
+        argv[i] = NULL;
+
+        if (++i < argc) {
+            display_name = argv[i];
+            argv[i] = NULL;
+        }
+    }
+    return display_name;
+}
+
+static void
+print_display_names(void)
+{
+    const VADisplayHooks **h;
+
+    printf("Available displays:\n");
+    for (h = g_display_hooks_available; *h != NULL; h++)
+        printf("  %s\n", (*h)->name);
+}
+
+static void
+sanitize_args(int *argc, char *argv[])
+{
+    char **out_args = argv;
+    int i, n = *argc;
+
+    for (i = 0; i < n; i++) {
+        if (argv[i])
+            *out_args++ = argv[i];
+    }
+    *out_args = NULL;
+    *argc = out_args - argv;
+}
+
+void
+va_init_display_args(int *argc, char *argv[])
+{
+    const char *display_name;
+
+    display_name = get_display_name(*argc, argv);
+    if (display_name && strcmp(display_name, "help") == 0) {
+        print_display_names();
+        exit(0);
+    }
+    g_display_name = display_name;
+
+    sanitize_args(argc, argv);
+}
+
+VADisplay
+va_open_display(void)
+{
+    VADisplay va_dpy = NULL;
+    unsigned int i;
+
+    for (i = 0; !va_dpy && g_display_hooks_available[i]; i++) {
+        g_display_hooks = g_display_hooks_available[i];
+        if (g_display_name &&
+            strcmp(g_display_name, g_display_hooks->name) != 0)
+            continue;
+        if (!g_display_hooks->open_display)
+            continue;
+        va_dpy = g_display_hooks->open_display();
+    }
+
+    if (!va_dpy)  {
+        fprintf(stderr, "error: failed to initialize display");
+        if (g_display_name)
+            fprintf(stderr, " '%s'", g_display_name);
+        fprintf(stderr, "\n");
+        abort();
+    }
+    return va_dpy;
+}
+
+void
+va_close_display(VADisplay va_dpy)
+{
+    if (!va_dpy)
+        return;
+
+    if (g_display_hooks && g_display_hooks->close_display)
+        g_display_hooks->close_display(va_dpy);
+}
+
+VAStatus
+va_put_surface(
+    VADisplay          va_dpy,
+    VASurfaceID        surface,
+    const VARectangle *src_rect,
+    const VARectangle *dst_rect
+)
+{
+    if (!va_dpy)
+        return VA_STATUS_ERROR_INVALID_DISPLAY;
+
+    if (g_display_hooks && g_display_hooks->put_surface)
+        return g_display_hooks->put_surface(va_dpy, surface, src_rect, dst_rect);
+    return VA_STATUS_ERROR_UNIMPLEMENTED;
+}
diff --git a/examples/libva_buffer_sharing/va_display.h b/examples/libva_buffer_sharing/va_display.h
new file mode 100644
index 0000000..4ed33e0
--- /dev/null
+++ b/examples/libva_buffer_sharing/va_display.h
@@ -0,0 +1,64 @@
+/*
+ * Copyright (c) 2012 Intel Corporation. All Rights Reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sub license, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ * 
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial portions
+ * of the Software.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
+ * IN NO EVENT SHALL PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR
+ * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+ * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef VA_DISPLAY_H
+#define VA_DISPLAY_H
+
+#include <va/va.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef struct {
+    const char *name;
+    VADisplay (*open_display)   (void);
+    void      (*close_display)  (VADisplay va_dpy);
+    VAStatus  (*put_surface)    (VADisplay va_dpy, VASurfaceID surface,
+                                 const VARectangle *src_rect,
+                                 const VARectangle *dst_rect);
+} VADisplayHooks;
+
+void
+va_init_display_args(int *argc, char *argv[]);
+
+VADisplay
+va_open_display(void);
+
+void
+va_close_display(VADisplay va_dpy);
+
+VAStatus
+va_put_surface(
+    VADisplay          va_dpy,
+    VASurfaceID        surface,
+    const VARectangle *src_rect,
+    const VARectangle *dst_rect
+);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* VA_DISPLAY_H */
diff --git a/examples/libva_buffer_sharing/va_display_x11.c b/examples/libva_buffer_sharing/va_display_x11.c
new file mode 100755
index 0000000..336bf86
--- /dev/null
+++ b/examples/libva_buffer_sharing/va_display_x11.c
@@ -0,0 +1,139 @@
+/*
+ * Copyright (c) 2012 Intel Corporation. All Rights Reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sub license, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ * 
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial portions
+ * of the Software.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
+ * IN NO EVENT SHALL PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR
+ * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+ * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+#include <stdio.h>
+#include <stdbool.h>
+#include <va/va_x11.h>
+#include "va_display.h"
+
+static Display *x11_display;
+static Window   x11_window;
+
+static VADisplay
+va_open_display_x11(void)
+{
+    x11_display = XOpenDisplay(NULL);
+    if (!x11_display) {
+        fprintf(stderr, "error: can't connect to X server!\n");
+        return NULL;
+    }
+    return vaGetDisplay(x11_display);
+}
+
+static void
+va_close_display_x11(VADisplay va_dpy)
+{
+    if (!x11_display)
+        return;
+
+    if (x11_window) {
+        XUnmapWindow(x11_display, x11_window);
+        XDestroyWindow(x11_display, x11_window);
+        x11_window = None;
+    }
+    XCloseDisplay(x11_display);
+    x11_display = NULL;
+}
+
+static int
+ensure_window(unsigned int width, unsigned int height)
+{
+    Window win, rootwin;
+    unsigned int black_pixel, white_pixel;
+    int screen;
+
+    if (!x11_display)
+        return 0;
+
+    if (x11_window) {
+        XResizeWindow(x11_display, x11_window, width, height);
+        return 1;
+    }
+
+    screen      = DefaultScreen(x11_display);
+    rootwin     = RootWindow(x11_display, screen);
+    black_pixel = BlackPixel(x11_display, screen);
+    white_pixel = WhitePixel(x11_display, screen);
+
+    win = XCreateSimpleWindow(
+        x11_display,
+        rootwin,
+        0, 0, width, height,
+        1, black_pixel, white_pixel
+    );
+    if (!win)
+        return 0;
+    x11_window = win;
+
+    XMapWindow(x11_display, x11_window);
+    XSync(x11_display, False);
+    return 1;
+}
+
+static inline bool
+validate_rect(const VARectangle *rect)
+{
+    return (rect            &&
+            rect->x >= 0    &&
+            rect->y >= 0    &&
+            rect->width > 0 &&
+            rect->height > 0);
+}
+
+static VAStatus
+va_put_surface_x11(
+    VADisplay          va_dpy,
+    VASurfaceID        surface,
+    const VARectangle *src_rect,
+    const VARectangle *dst_rect
+)
+{
+    unsigned int win_width, win_height;
+
+    if (!va_dpy)
+        return VA_STATUS_ERROR_INVALID_DISPLAY;
+    if (surface == VA_INVALID_SURFACE)
+        return VA_STATUS_ERROR_INVALID_SURFACE;
+    if (!validate_rect(src_rect) || !validate_rect(dst_rect))
+        return VA_STATUS_ERROR_INVALID_PARAMETER;
+
+    win_width  = dst_rect->x + dst_rect->width;
+    win_height = dst_rect->y + dst_rect->height;
+    if (!ensure_window(win_width, win_height))
+        return VA_STATUS_ERROR_ALLOCATION_FAILED;
+    return vaPutSurface(va_dpy, surface, x11_window,
+                        src_rect->x, src_rect->y,
+                        src_rect->width, src_rect->height,
+                        dst_rect->x, dst_rect->y,
+                        dst_rect->width, dst_rect->height,
+                        NULL, 0,
+                        VA_FRAME_PICTURE);
+}
+
+const VADisplayHooks va_display_hooks_x11 = {
+    "x11",
+    va_open_display_x11,
+    va_close_display_x11,
+    va_put_surface_x11,
+};
diff --git a/kernels/runtime_gray_effect.cl b/kernels/runtime_gray_effect.cl
new file mode 100644
index 0000000..b89eeae
--- /dev/null
+++ b/kernels/runtime_gray_effect.cl
@@ -0,0 +1,28 @@
+__kernel void
+runtime_gray_effect(__read_only image2d_t src_y,
+                    __read_only image2d_t src_uv,
+                    __write_only image2d_t dst_y,
+                    __write_only image2d_t dst_uv)
+{
+  const sampler_t sampler = CLK_NORMALIZED_COORDS_FALSE | CLK_FILTER_NEAREST;
+  int2 coord_r, coord_w;
+  uint4 color = (uint4)(0, 0, 0, 0);
+
+  coord_r.x = (int)get_global_id(0);
+  coord_r.y = (int)get_global_id(1);
+
+  coord_w = coord_r;
+
+  color = read_imageui(src_y, sampler, coord_r);
+
+  write_imageui(dst_y, coord_w, color);
+
+  coord_r /= 2;
+  coord_w /= 2;
+  color = read_imageui(src_uv, sampler, coord_r);
+
+  color.x = 0x8080;
+
+  write_imageui(dst_uv, coord_w, color);
+}
+
-- 
1.9.1

